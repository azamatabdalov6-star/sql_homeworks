/* Урок 1: Введение в SQL Server и SSMS
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
Легкий
1.	Дайте определение следующим терминам: данные, база данных, реляционная база данных и таблица.
2.	Перечислите пять ключевых особенностей SQL Server.
3.	Какие режимы аутентификации доступны при подключении к SQL Server? (Укажите не менее 2)
Середина
4.	Создайте новую базу данных в SSMS с именем SchoolDB.
5.	Напишите и выполните запрос для создания таблицы под названием «Студенты» со столбцами: StudentID (INT, PRIMARY KEY), Имя (VARCHAR(50)), Возраст (INT).
6.	Опишите различия между SQL Server, SSMS и SQL.
Жесткий
7.	Изучите и объясните различные команды SQL: DQL, DML, DDL, DCL, TCL с примерами.
8.	Напишите запрос для вставки трех записей в таблицу «Студенты».
9.	Восстановите файл AdventureWorksDW2022.bak на своем сервере. (опишите шаги по отправке) Вы можете найти базу данных по этой ссылке:https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorksDW2022.bak

Ответы
Данные — это факты или числа, которые хранятся и обрабатываются системой, база данных — организованная коллекция данных, а реляционная база данных хранит данные в таблицах с предопределенными связями между ними, где таблица — это набор данных, представленный в виде строк и столбцов. Пять ключевых особенностей SQL Server включают: реляционную модель данных, поддержку транзакций, масштабируемость, безопасность и широкий набор инструментов управления. SQL Server поддерживает два основных режима аутентификации: Аутентификация Windows (использует учетные записи домена Windows) и Смешанная аутентификация (позволяет использовать как учетные записи Windows, так и собственные учетные записи SQL Server). 
Легкий
•	Данные:
необработанные факты, числа или символы, которые система может обрабатывать. 
•	База данных:
организованная коллекция данных, которая может быть легко доступна, управляема и обновлена. 
•	Реляционная база данных:
база данных, которая хранит данные в таблицах (отношениях), где данные организованы в строки (кортежи) и столбцы (атрибуты), а между таблицами существуют предопределенные связи. 
•	Таблица:
основной элемент реляционной базы данных, который представляет собой структуру данных, состоящую из строк (записей) и столбцов (полей), содержащих информацию об определенном типе объектов. 
Пять ключевых особенностей SQL Server
1.	1. Масштабируемость:
возможность работать с очень большими объемами данных и поддерживать высокую нагрузку. 
2.	2. Безопасность:
средства аутентификации и авторизации для защиты данных, а также шифрование и аудит. 
3.	3. Высокая доступность и отказоустойчивость:
технологии, обеспечивающие непрерывную работу системы даже в случае сбоев. 
4.	4. Интеграция:
возможность интеграции с другими продуктами и технологиями Microsoft, а также другими платформами. 
5.	5. Инструменты управления:
SQL Server Management Studio (SSMS) и другие инструменты для администрирования, разработки и мониторинга. 
Режимы аутентификации 
1.	1. Аутентификация Windows:
использует учетные записи домена Windows для проверки пользователей, когда пользователь подключается к SQL Server.
2.	2. Смешанная аутентификация:
позволяет использовать как учетные записи Windows, так и собственные учетные записи, созданные в SQL Server с паролями, для подключения к базе данных.
Середина
Создание базы данных и таблицы 
1.	1. Создайте базу данных:
•	В SSMS щелкните правой кнопкой мыши на папке "Databases" (Базы данных) в "Object Explorer" (Обозреватель объектов).
•	Выберите "New Database..." (Новая база данных...).
•	В поле "Database name" (Имя базы данных) введите SchoolDB и нажмите OK.
2.	2. Создайте таблицу "Студенты":
•	В SSMS разверните папку "Databases" и выберите созданную SchoolDB.
•	Щелкните правой кнопкой мыши на папке "Tables" и выберите "New Table..." (Новая таблица...).
•	В окне конструктора таблиц введите следующие столбцы:
•	StudentID: тип данных INT, отметьте "Primary Key" (Первичный ключ).
•	Имя: тип данных VARCHAR(50).
•	Возраст: тип данных INT.
•	Нажмите на кнопку "Save" (Сохранить) и дайте таблице имя "Студенты".
Различия между SQL Server, SSMS и SQL 
•	SQL Server: Это сама система управления базами данных (СУБД), разработанная Microsoft, которая хранит и управляет данными.
SQL команды подразделяются на DQL (запросы данных), DML (манипуляция данными), DDL (определение данных), DCL (управление данными) и TCL (управление транзакциями). DQL команда SELECT извлекает данные, DML команды INSERT, UPDATE, DELETE изменяют данные, DDL команды CREATE, ALTER, DROP управляют структурой базы данных, DCL команды GRANT и REVOKE управляют правами доступа, а TCL команды COMMIT и ROLLBACK управляют транзакциями. 
1. DQL (Data Query Language) 
•	Описание: Используется для извлечения данных из одной или нескольких таблиц в базе данных.
•	Пример:
Код
    SELECT имя, фамилия FROM Студенты WHERE возраст > 20;
2. DML (Data Manipulation Language) 
•	Описание: Используется для управления данными в базе данных, а именно для вставки, обновления и удаления записей.
•	Примеры:
o	Вставка данных:
Код
        INSERT INTO Студенты (имя, фамилия, возраст) VALUES ('Иван', 'Петров', 21);
Обновление данных.
Код
        UPDATE Студенты SET возраст = 22 WHERE имя = 'Иван';
Удаление данных.
Код
        DELETE FROM Студенты WHERE имя = 'Иван';
3. DDL (Data Definition Language) 
•	Описание: Используется для определения и управления объектами базы данных, такими как таблицы, индексы.
•	Примеры:
o	Создание таблицы:
Код
        CREATE TABLE Студенты (
            id INT PRIMARY KEY,
            имя VARCHAR(50),
            фамилия VARCHAR(50),
            возрастINT    );
Изменение таблицы.
Код
        ALTER TABLE Студенты ADD COLUMN email VARCHAR(100);
Удаление таблицы.
Код        DROP TABLE Студенты;
4. DCL (Data Control Language) 
•	Описание: Используется для управления правами доступа к данным и объектам базы данных, предоставления и отмены разрешений.
•	Примеры:
o	Предоставление прав:
Код        GRANT SELECT ON Студенты TO 'пользователь';
Отмена прав.
Код        REVOKE UPDATE ON Студенты FROM 'пользователь';
5. TCL (Transaction Control Language) 
•	Описание: Используется для управления транзакциями в базе данных, включая их фиксацию или откат.
•	Примеры:
o	Начало транзакции и фиксация:
Код      BEGIN TRANSACTION;
        INSERT INTO Студенты (имя, фамилия, возраст) VALUES ('Мария', 'Иванова',20);
        COMMIT;
Откат транзакции.
Код        ROLLBACK;
Запрос для вставки трех записей в таблицу «Студенты»:
Код
INSERT INTO Студенты (имя, фамилия, возраст) VALUES
('Анна','Сидорова',19),('Петр', 'Васильев', 22),('Елена', 'Кузнецова', 20);
Восстановление файла AdventureWorksDW2022.bak на вашем сервере: 
1.	Скачайте файл: Перейдите по ссылке Microsoft SQL Server Samples GitHub и скачайте файл AdventureWorksDW2022.bak на свой локальный компьютер.








Урок 2: Команды DDL и DML
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
________________________________________
Задачи базового уровня (10)
1.	Создайте таблицу Employeesсо столбцами: EmpIDINT, Name(VARCHAR(50)) и Salary(DECIMAL(10,2)).
2.	Вставьте три записи в Employeesтаблицу, используя разные подходы INSERT INTO (вставка одной строки и вставка нескольких строк).
3.	Обновить Salaryсотрудника до 7000места EmpID = 1.
4.	Удалить запись из Employeesтаблицы, где EmpID = 2.
5.	Дайте краткое определение разницы между DELETE, TRUNCATE, и DROP.
6.	Измените Nameстолбец в Employeesтаблице на VARCHAR(100).
7.	Добавьте новый столбец Department( VARCHAR(50)) в Employeesтаблицу.
8.	Измените тип данных столбца Salaryна FLOAT.
9.	Создайте еще одну таблицу Departmentsсо столбцами DepartmentID(INT, PRIMARY KEY) и DepartmentName(VARCHAR(50)).
10.	Удалить все записи из Employeesтаблицы, не удаляя ее структуру.
________________________________________
Задания среднего уровня (6)
11.	Вставьте пять записей в Departmentsтаблицу, используя INSERT INTO SELECTметод (в качестве данных вы можете написать все, что угодно).
12.	Обновите данные Departmentвсех сотрудников в Salary > 5000разделе «Руководство».
13.	Напишите запрос, который удалит всех сотрудников, но сохранит структуру таблицы.
14.	Удалить Departmentстолбец из Employeesтаблицы.
15.	Переименуйте Employeesтаблицу, StaffMembersиспользуя команды SQL.
16.	Напишите запрос для полного удаления Departmentsтаблицы из базы данных.
________________________________________
Задания продвинутого уровня (9)
17.	Создайте таблицу с именем Products, содержащую не менее 5 столбцов, включая: ProductID (первичный ключ), ProductName (VARCHAR), Category (VARCHAR), Price (DECIMAL)
18.	Добавьте ограничение CHECK, чтобы гарантировать, что Price всегда больше 0.
19.	Измените таблицу, добавив столбец StockQuantity со значением ПО УМОЛЧАНИЮ 50.
20.	Переименовать категорию в ProductCategory
21.	Вставьте 5 записей в таблицу Products, используя стандартные запросы INSERT INTO.
22.	Используйте SELECT INTO для создания резервной таблицы с именем Products_Backup, содержащей все данные о продуктах.
23.	Переименуйте таблицу «Продукты» в «Инвентарь».
24.	Измените таблицу Inventory, чтобы изменить тип данных Price с DECIMAL(10,2) на FLOAT.
25.	Добавьте в таблицу столбец IDENTITY с именем ProductCode, который начинается с 1000 и увеличивается на 5 Inventory.

Ответы
Вот решения для базовых задач по DDL и DML для SQL Server:
1.	Создание таблицы Employees: CREATE TABLE Employees (EmpID INT, Name VARCHAR(50), Salary DECIMAL(10,2));
2.	Вставка записей: Используйте INSERT INTO для одной строки (INSERT INTO Employees (EmpID, Name, Salary) VALUES (1, 'Иван', 5000.00);) и для нескольких строк (INSERT INTO Employees (EmpID, Name, Salary) VALUES (2, 'Петр', 6000.00), (3, 'Анна', 5500.00);).
3.	Обновление записи: UPDATE Employees SET Salary = 7000.00 WHERE EmpID = 1;
4.	Удаление записи: DELETE FROM Employees WHERE EmpID = 2;
5.	Разница между DELETE, TRUNCATE, и DROP:
o	DELETE удаляет строки по условию, сохраняя структуру таблицы.
o	TRUNCATE удаляет все строки из таблицы, сохраняя структуру, но освобождая память.
o	DROP удаляет всю таблицу, включая ее структуру.
6.	Изменение столбца Name: ALTER TABLE Employees ALTER COLUMN Name VARCHAR(100);
7.	Добавление столбца Department: ALTER TABLE Employees ADD Department VARCHAR(50);
8.	Изменение типа данных Salary: ALTER TABLE Employees ALTER COLUMN Salary FLOAT;
9.	Создание таблицы Departments: CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50));
10.	Удаление всех записей: TRUNCATE TABLE Employees;
________________________________________
Подробное решение по шагам:
1. Создайте таблицу Employees:
Код
CREATE TABLE Employees (
    EmpID INT,
    Name VARCHAR(50),
    Salary DECIMAL(10,2)
);
•	Объяснение: Эта команда CREATE TABLE создает новую таблицу с указанными именами столбцов и их типами данных.
2. Вставьте три записи в Employees: Одна запись.
Код
    INSERT INTO Employees (EmpID, Name, Salary) VALUES (1, 'Иван', 5000.00);
Несколько записей.
Код
    INSERT INTO Employees (EmpID, Name, Salary) VALUES
    (2, 'Петр', 6000.00),
    (3, 'Анна', 5500.00);
•	Объяснение: INSERT INTO используется для добавления новых строк в таблицу. Вы можете вставлять по одной строке или сразу несколько.
3. Обновите Salary сотрудника с EmpID = 1 до 7000:
Код
UPDATE Employees
SET Salary = 7000.00
WHERE EmpID = 1;
•	Объяснение: Команда UPDATE изменяет существующие данные в таблице, а WHERE указывает, какие именно строки нужно изменить.
4. Удалите запись из Employees с EmpID = 2:
Код
DELETE FROM Employees
WHERE EmpID = 2;
•	Объяснение: DELETE удаляет строки из таблицы.
5. Дайте краткое определение разницы между DELETE, TRUNCATE, и DROP:
•	DELETE:
Удаляет строки из таблицы на основе условия (WHERE). Эта операция является "медленной", так как регистрируется каждая удаленная строка, и вы можете отменить ее действие.
•	TRUNCATE:
Быстро удаляет все строки из таблицы. Эта операция не регистрирует каждую строку, что делает ее более производительной, но вы не можете отменить ее действие.
•	DROP:
Удаляет всю таблицу из базы данных, включая ее структуру и данные. Это более радикальная операция.
**6.



Чтобы создать, изменить и управлять таблицей и данными в SQL, вы будете использовать команды CREATE TABLE, ALTER TABLE, INSERT INTO, SELECT INTO и ALTER TABLE для создания таблицы Products, добавления столбцов, установки ограничений, вставки данных, резервного копирования таблицы и изменения её структуры. 
17. Создание таблицы Products
Код
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255), Category VARCHAR(255), Price DECIMAL(10, 2));
18. Добавление ограничения CHECK для цены
Код
ALTER TABLE Products ADD CONSTRAINT CHK_Price_Positive CHECK (Price > 0);
19. Добавление столбца StockQuantity с значением по умолчанию
Код
ALTER TABLE ProductsADD StockQuantity INT DEFAULT 50;
20. Переименование столбца Category в ProductCategory
Код
EXEC sp_rename 'Products.Category', 'ProductCategory', 'COLUMN';
21. Вставка записей в таблицу Products
Код
INSERT INTO Products (ProductID, ProductName, ProductCategory, Price, StockQuantity)VALUES
(1, 'Смартфон', 'Электроника', 50000.00, 100),
(2, 'Ноутбук', 'Электроника', 120000.00, 50),
(3, 'Книга "SQL для начинающих"', 'Книги', 2500.00, 200),
(4, 'Кофемашина', 'Бытовая техника', 35000.00, 75),
(5, 'Настольная лампа', 'Освещение', 5000.00, 150);
22. Создание резервной таблицы Products_Backup
Код
SELECT *INTO Products_BackupFROM Products;
23. Переименование таблицы Products в Inventory
Код
EXEC sp_rename 'Products', 'Inventory';
24. Изменение типа данных столбца Price
Код
ALTER TABLE InventoryALTER COLUMN Price FLOAT;
25. Добавление столбца ProductCode со значением IDENTITY
Примечание: Синтаксис для добавления столбца IDENTITY может отличаться в зависимости от используемой СУБД. Ниже приведен пример для SQL Server. 
Код
ALTER TABLE InventoryADD ProductCode INT IDENTITY(1000, 5); 
-- Начиная с 1000 и с шагом 5

Урок 3: Импорт и экспорт данных
✅ Импорт данных (BULK INSERT, Excel, Text) ✅ Экспорт данных (Excel, Text) ✅ Комментарии, столбец идентификаторов, значения NULL/NOT NULL ✅ Уникальный ключ, первичный ключ, внешний ключ, проверочное ограничение ✅ Различия между UNIQUE KEY и PRIMARY KEY
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
________________________________________
🟢 Задания лёгкого уровня (10)
1.	Определите и объясните назначение BULK INSERT в SQL Server.
2.	Перечислите четыре формата файлов, которые можно импортировать в SQL Server.
3.	Создайте таблицу Products со столбцами: ProductID (INT, PRIMARY KEY), ProductName (VARCHAR(50)), Price (DECIMAL(10,2)).
4.	Вставьте три записи в таблицу Products с помощью INSERT INTO.
5.	Объясните разницу между NULL и NOT NULL.
6.	Добавьте ограничение UNIQUE к столбцу ProductName в таблице Products.
7.	Напишите комментарий в SQL-запросе, объясняющий его цель.
8.	Добавьте столбец CategoryID в таблицу Products.
9.	Создайте таблицу «Категории» с CategoryID в качестве PRIMARY KEY и CategoryName в качестве UNIQUE.
10.	Объясните назначение столбца IDENTITY в SQL Server.
________________________________________
🟠 Задачи среднего уровня (10)
11.	Используйте BULK INSERT для импорта данных из текстового файла в таблицу Products.
12.	Создайте внешний ключ в таблице «Продукты», ссылающийся на таблицу «Категории».
13.	Объясните разницу между PRIMARY KEY и UNIQUE KEY.
14.	Добавьте ограничение CHECK в таблицу Products, гарантируя, что Price > 0.
15.	Измените таблицу «Продукты», добавив столбец «Запасы» (INT, NOT NULL).
16.	Используйте функцию ISNULL для замены значений NULL в столбце Price на 0.
17.	Опишите назначение и использование ограничений FOREIGN KEY в SQL Server.
________________________________________
🔴 Задания сложного уровня (10)
18.	Напишите скрипт для создания таблицы Customers с ограничением CHECK, гарантирующим, что возраст >= 18.
19.	Создайте таблицу со столбцом IDENTITY, начинающимся со 100 и увеличивающимся на 10.
20.	Напишите запрос для создания составного первичного ключа в новой таблице OrderDetails.
21.	Объясните использование функций COALESCE и ISNULL для обработки значений NULL.
22.	Создайте таблицу Employees с PRIMARY KEY для EmpID и UNIQUE KEY для Email.
23.	Напишите запрос для создания FOREIGN KEY с опциями ON DELETE CASCADE и ON UPDATE CASCADE.

Ответы
1. Назначение BULK INSERT: Инструкция BULK INSERT в SQL Server используется для загрузки данных из файла (например, CSV) непосредственно в таблицу SQL Server, что является эффективным методом для импорта больших объемов данных. 
2. Форматы импортируемых файлов: В SQL Server можно импортировать данные из файлов в форматах: 
•	CSV (значения, разделенные запятыми)
•	Текстовые файлы с фиксированной длиной
•	XML-файлы
•	И другие форматы, совместимые с SQL Server
3. Создание таблицы Products:
Код
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Price DECIMAL(10,2));
Этот скрипт создает таблицу Products с указанными столбцами и типами данных, где ProductID является первичным ключом. 
4. Вставка записей:
Код
INSERT INTO Products (ProductID, ProductName, Price)VALUES
(1, 'Ноутбук', 1200.00),
(2, 'Мышь', 25.50),
(3, 'Клавиатура', 75.00);
Эта команда добавляет три записи в таблицу Products. 
5. Разница между NULL и NOT NULL: 
•	NULL
означает, что в ячейке нет значения. Это как пустой или неизвестный элемент данных.
•	NOT NULL
— это ограничение, которое требует, чтобы в ячейке всегда было какое-то значение. Нельзя оставить столбец пустым, если он определен как NOT NULL.
6. Добавление ограничения UNIQUE:
Код
ALTER TABLE ProductsADD CONSTRAINT UQ_ProductName UNIQUE (ProductName);
Эта команда добавляет ограничение UNIQUE к столбцу ProductName, гарантируя, что все значения в этом столбце будут уникальными (не будет повторяющихся названий товаров). 
7. Комментарии в SQL:
Код
-- Этот запрос выбирает все товары, цена которых выше 100 SELECT * FROM Products WHERE Price > 100;
Комментарии в SQL начинаются с -- для однострочных комментариев или заключаются в /* ... */ для многострочных. Они объясняют код, но не выполняются сервером. 
8. Добавление столбца CategoryID:
Код
ALTER TABLE ProductsADD CategoryID INT;
Эта команда добавляет новый столбец CategoryID (целочисленный) в таблицу Products. 
9. Создание таблицы Categories:
Код
CREATE TABLE Categories (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(50) UNIQUE);
Этот скрипт создает таблицу Categories с CategoryID как первичным ключом и CategoryName как уникальным столбцом. 
10. Назначение столбца IDENTITY:
Столбец с атрибутом IDENTITY в SQL Server автоматически генерирует уникальные, последовательно возрастающие числа для каждой новой строки. Это часто используется для первичных ключей, чтобы каждый новый продукт или запись получал уникальный идентификатор без необходимости вручную его назначать. 
 
 


Вот ответы на ваши вопросы по SQL:
11. Использование BULK INSERT для импорта данных
Инструкция BULK INSERT используется для быстрого импорта данных из текстового файла в таблицу, считывая файл напрямую процессом SQL Server. 
Пример:
Код
BULK INSERT Products
FROM 'C:\Path\To\YourFile.txt'
WITH (
    FIELDTERMINATOR = ',', -- Разделитель полей (например, запятая)
    ROWTERMINATOR = '\n',  -- Разделитель строк (например, новая строка)
    FIRSTROW = 1           -- Начать импорт с первой строки файла
);
12. Создание внешнего ключа (FOREIGN KEY)
Внешний ключ связывает столбец в таблице «Продукты» со столбцом (обычно первичным ключом) в таблице «Категории», обеспечивая ссылочную целостность данных. 
Пример:
Код
ALTER TABLE Products
ADD CONSTRAINT FK_Products_Categories
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID);
Предполагается, что CategoryID существует в обеих таблицах.
13. Разница между PRIMARY KEY и UNIQUE KEY 
•	PRIMARY KEY (первичный ключ):
•	Идентифицирует каждую запись в таблице уникальным образом.
•	По умолчанию создается как кластеризованный индекс, но не обязательно.
•	Не может содержать значения NULL.
•	Таблица может иметь только один первичный ключ.
•	UNIQUE KEY (уникальный ключ):
•	Гарантирует, что все значения в столбце (или комбинации столбцов) уникальны, за исключением NULL-значений.
•	Может содержать одно или несколько значений NULL.
•	В таблице может быть несколько уникальных ключей.
14. Ограничение CHECK для Price
Ограничение CHECK гарантирует, что значения в столбце Price всегда будут больше нуля.
Пример:
Код
ALTER TABLE Products
ADD CONSTRAINT CK_Products_Price
CHECK (Price > 0);
15. Добавление столбца «Запасы»
Выполните следующую команду, чтобы добавить столбец «Запасы» в таблицу «Продукты».
Пример:
Код
ALTER TABLE Products
ADD Запасы INT NOT NULL;
16. Использование ISNULL для замены NULL-значений
Функция ISNULL позволяет заменить значения NULL на указанное значение, например, на 0. 
Пример:
Код
UPDATE Products
SET Price = ISNULL(Price, 0);
17. Назначение и использование FOREIGN KEY 
•	Назначение:
Ограничение FOREIGN KEY устанавливает связь между двумя таблицами. Оно обеспечивает ссылочную целостность, гарантируя, что значения в столбце внешнего ключа (в ссылающейся таблице) соответствуют существующим значениям в столбце первичного ключа (в ссылочной таблице).
•	Использование:
•	Предотвращение "висящих" записей: Не позволяет удалить родительскую запись (из ссылки), если есть связанные дочерние записи.
•	Поддержание целостности данных: Гарантирует, что продукты всегда будут иметь соответствующую категорию.
•	Улучшение структуры базы данных: Помогает организовать данные и избежать избыточности.


 

 
Вот скрипты и объяснения для выполнения ваших заданий по SQL:
1. Таблица Customers с ограничением CHECK (возраст >= 18)
Код
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Age INT,
    CHECK (Age >= 18) -- Ограничение, гарантирующее, что возраст будет не меньше 18
);
•	CHECK (Age >= 18): Это ограничение гарантирует, что при добавлении или обновлении записи возраст клиента будет не меньше 18.
2. Таблица с колонкой IDENTITY (начало со 100, шаг 10)
Код
CREATE TABLE Items (
    ItemID INT IDENTITY(100, 10) PRIMARY KEY, -- Начинается с 100, инкремент 10
    ItemName VARCHAR(100)
);
•	IDENTITY(100, 10): Этот параметр указывает, что ItemID будет автоматически генерироваться, начиная со значения 100 и увеличиваясь на 10 для каждой новой записи.
3. Создание составного первичного ключа в таблице OrderDetails
Код
CREATE TABLE OrderDetails (
    OrderID INT,
    ProductID INT,
    Quantity INT,
    PRIMARY KEY (OrderID, ProductID) -- Составной первичный ключ из двух столбцов
);
•	PRIMARY KEY (OrderID, ProductID): В данном случае первичный ключ состоит из двух столбцов, OrderID и ProductID. Это означает, что комбинация OrderID и ProductID должна быть уникальной для каждой строки в таблице.
4. Объяснение функций COALESCE и ISNULL
Обе функции используются для обработки значений NULL, но имеют различия в синтаксисе и поведении:
•	COALESCE(выражение1, выражение2, ...):
•	Возвращает первое не-NULL выражение из списка.
•	Поддерживается стандартом SQL, что делает её более переносимой между различными СУБД.
•	Пример: COALESCE(Phone, 'N/A') вернет номер телефона, если он есть, или 'N/A', если Phone равен NULL.
•	ISNULL(выражение1, выражение2):
•	Также возвращает первое не-NULL выражение из двух.
•	Является специфичной функцией для Microsoft SQL Server.
•	Пример: ISNULL(Email, 'Unknown') вернет Email, если он существует, или 'Unknown', если Email равен NULL.
5. Таблица Employees с PRIMARY KEY и UNIQUE KEY
Код
CREATE TABLE Employees (
    EmpID INT PRIMARY KEY, -- Первичный ключ, уникальный идентификатор сотрудника
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Email VARCHAR(100) UNIQUE -- Уникальный ключ, гарантирующий уникальность email
);
•	PRIMARY KEY (EmpID):
Делает столбец EmpID уникальным идентификатором записи и автоматически создает индекс.
•	UNIQUE (Email):
Гарантирует, что каждое значение в столбце Email будет уникальным, но в отличие от PRIMARY KEY, столбец может содержать NULL (в зависимости от СУБД).
6. Запрос для FOREIGN KEY с опциями ON DELETE CASCADE и ON UPDATE CASCADE
Предположим, у вас есть таблица Orders и вы хотите создать связь с таблицей Customers так, чтобы при удалении или обновлении клиента (через Customers.CustomerID) соответствующие записи в Orders также удалялись или обновлялись.
Код
ALTER TABLE Orders
ADD CONSTRAINT FK_Orders_Customers -- Название ограничения
FOREIGN KEY (CustomerID) -- Столбец в таблице Orders
REFERENCES Customers (CustomerID) -- Ссылочный столбец в таблице Customers
ON DELETE CASCADE -- Удаление записей в Orders при удалении клиента
ON UPDATE CASCADE; -- Обновление записей в Orders при обновлении CustomerID клиента



Урок 4: Фильтрация и упорядочивание данных
✅ Фильтрация и упорядочивание данных ✅ Использование SELECT TOP, OFFSET-FETCH ✅ Использование ISNULL и COALESCE ✅ Сортировка по (ASC, DESC) ✅ Фильтрация по условию Where ✅ Оператор LIKE ✅ Подстановочные знаки ✅ Операторы ANY и ALL
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
🟢 Задания лёгкого уровня (10)
1.	Напишите запрос для выбора 5 лучших сотрудников из таблицы «Сотрудники».
2.	Используйте SELECT DISTINCT для выбора уникальных значений категории из таблицы «Товары».
3.	Напишите запрос, который фильтрует таблицу «Продукты» для отображения продуктов с ценой > 100.
4.	Напишите запрос для выбора всех клиентов, чьи имена начинаются с буквы «А», с помощью оператора LIKE.
5.	Упорядочить результаты таблицы «Продукты» по цене в порядке возрастания.
6.	Напишите запрос, который использует предложение WHERE для фильтрации сотрудников с зарплатой >= 60000 и DepartmentName = 'HR'.
7.	Используйте ISNULL для замены значений NULL в столбце Email на текст « noemail@example.com ». Из таблицы «Сотрудники».
8.	Напишите запрос, который покажет все продукты с ценой ОТ 50 ДО 100.
9.	Используйте SELECT DISTINCT для двух столбцов (Category и ProductName) в таблице Products.
10.	После SELECT DISTINCT для двух столбцов (Category и ProductName) упорядочьте результаты по ProductName в порядке убывания.
________________________________________
🟠 Задачи среднего уровня (10)
11.	Напишите запрос для выбора 10 лучших товаров из таблицы «Товары», отсортированных по убыванию цены.
12.	Используйте COALESCE, чтобы вернуть первое ненулевое значение из FirstName или LastName в таблице Employees.
13.	Напишите запрос, который выбирает отдельную категорию и цену из таблицы «Товары».
14.	Напишите запрос, который фильтрует таблицу «Сотрудники», чтобы показать сотрудников, возраст которых находится в диапазоне от 30 до 40 лет или DepartmentName = «Маркетинг».
15.	Используйте OFFSET-FETCH для выбора строк с 11 по 20 из таблицы «Сотрудники», упорядоченных по убыванию зарплаты.
16.	Напишите запрос для отображения всех товаров с ценой <= 1000 и количеством на складе > 50, отсортированных по количеству на складе в порядке возрастания.
17.	Напишите запрос, который фильтрует таблицу Products по значениям ProductName, содержащим букву «e», с помощью LIKE.
18.	Используйте оператор IN для фильтрации по сотрудникам, работающим в отделе кадров, ИТ или финансов.
19.	Используйте ORDER BY для отображения списка клиентов, отсортированного по городу в порядке возрастания и по почтовому индексу в порядке убывания. Используйте таблицу «Клиенты».
________________________________________
🔴 Задания сложного уровня
20.	Напишите запрос, который выбирает 5 лучших продуктов с наибольшими продажами, используя TOP(5) и сортируя по SaleAmount DESC.
21.	Объедините FirstName и LastName в один столбец с именем FullName в таблице Employees (только в операторе SELECT).
22.	Напишите запрос для выбора отдельных Category, ProductName и Price для продуктов стоимостью выше 50 долларов США, используя DISTINCT для трех столбцов.
23.	Напишите запрос, который выбирает товары, цена которых составляет менее 10% от средней цены в таблице «Товары». (Проведите исследование, чтобы узнать, как найти среднюю цену всех товаров.)
24.	Используйте предложение WHERE для фильтрации по сотрудникам, возраст которых меньше 30 лет и которые работают либо в отделе кадров, либо в отделе ИТ.
25.	Используйте LIKE с подстановочным знаком, чтобы выбрать всех клиентов, чей адрес электронной почты содержит домен «@gmail.com».
26.	Напишите запрос, который использует оператор ALL для поиска сотрудников, чья зарплата больше, чем у всех сотрудников отдела «Продажи».
27.	Напишите запрос, который фильтрует таблицу «Заказы» по заказам, размещённым за последние 180 дней, используя BETWEEN и LATEST_DATE в таблице. (Поиск по запросу «Как получить текущую и последнюю дату»)
Необходимые таблицы:
DROP TABLE IF EXISTS Employees;

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50) NULL,
    LastName VARCHAR(50) NULL,
    DepartmentName VARCHAR(50),
    Salary DECIMAL(10, 2),
    HireDate DATE,
    Age INT,
    Email VARCHAR(100) NULL,
    Country VARCHAR(50)
);

INSERT INTO Employees (EmployeeID, FirstName, LastName, DepartmentName, Salary, HireDate, Age, Email, Country) VALUES
(1, 'John', 'Doe', 'IT', 55000.00, '2020-01-01', 30, 'johndoe@example.com', 'USA'),
(2, 'Jane', 'Smith', 'HR', 65000.00, '2019-03-15', 28, 'janesmith@example.com', 'USA'),
(3, NULL, 'Johnson', 'Finance', 45000.00, '2021-05-10', 25, NULL, 'Canada'),
(4, 'James', 'Brown', 'Marketing', 60000.00, '2018-07-22', 35, 'jamesbrown@example.com', 'UK'),
(5, 'Patricia', NULL, 'HR', 70000.00, '2017-08-30', 40, NULL, 'USA'),
(6, 'Michael', 'Miller', 'IT', 75000.00, '2020-12-12', 27, 'michaelm@example.com', 'Germany'),
(7, 'Linda', NULL, 'Finance', 48000.00, '2016-11-02', 42, NULL, 'Canada'),
(8, 'David', 'Moore', 'Marketing', 85000.00, '2021-09-01', 29, 'davidm@example.com', 'UK'),
(9, 'Elizabeth', 'Taylor', 'HR', 60000.00, '2019-05-18', 31, 'elizabetht@example.com', 'USA'),
(10, 'William', NULL, 'IT', 64000.00, '2020-04-10', 26, NULL, 'Germany'),
(11, NULL, 'Thomas', 'Finance', 47000.00, '2017-01-25', 38, NULL, 'Canada'),
(12, 'Joseph', 'Jackson', 'Marketing', 78000.00, '2016-09-30', 44, 'josephj@example.com', 'UK'),
(13, 'Karen', 'White', 'HR', 59000.00, '2018-06-10', 33, 'karenw@gmail.com', 'USA'),
(14, 'Steven', NULL, 'IT', 71000.00, '2021-07-15', 24, NULL, 'Germany'),
(15, 'Nancy', 'Clark', 'Finance', 45000.00, '2020-02-20', 27, 'nancyc@example.com', 'Canada'),
(16, 'George', 'Lewis', 'Marketing', 80000.00, '2019-11-10', 36, 'georgel@example.com', 'UK'),
(17, 'Betty', NULL, 'HR', 55000.00, '2017-04-05', 41, NULL, 'USA'),
(18, 'Samuel', 'Walker', 'IT', 72000.00, '2021-03-22', 23, 'samuelw@example.com', 'Germany'),
(19, 'Helen', 'Hall', 'Finance', 49000.00, '2018-10-16', 34, 'helenh@example.com', 'Canada'),
(20, NULL, 'Allen', 'Marketing', 90000.00, '2015-08-11', 50, NULL, 'UK'),
(21, 'Betty', 'Young', 'HR', 53000.00, '2020-05-17', 28, 'bettyy@gmail.com', 'USA'),
(22, 'Frank', NULL, 'IT', 67000.00, '2021-02-02', 26, 'frankk@example.com', 'Germany'),
(23, 'Deborah', 'Scott', 'Finance', 47000.00, '2019-07-09', 29, NULL, 'Canada'),
(24, 'Matthew', 'Green', 'Marketing', 76000.00, '2021-01-15', 30, 'matthewg@example.com', 'UK'),
(25, NULL, 'Adams', 'HR', 54000.00, '2020-06-21', 27, NULL, 'USA'),
(26, 'Paul', 'Nelson', 'IT', 71000.00, '2018-12-03', 37, 'pauln@example.com', 'Germany'),
(27, 'Margaret', NULL, 'Finance', 46000.00, '2020-08-19', 25, 'margaretc@example.com', 'Canada'),
(28, 'Anthony', 'Mitchell', 'Marketing', 82000.00, '2021-04-10', 29, NULL, 'UK'),
(29, 'Lisa', 'Perez', 'HR', 60000.00, '2021-03-05', 24, 'lisap@example.com', 'USA'),
(30, NULL, 'Roberts', 'IT', 69000.00, '2019-09-24', 32, NULL, 'Germany'),
(31, 'Jessica', 'Gonzalez', 'Finance', 47000.00, '2017-12-13', 38, 'jessicag@gamil.com', 'Canada'),
(32, 'Brian', NULL, 'Marketing', 85000.00, '2018-11-05', 35, NULL, 'UK'),
(33, 'Dorothy', 'Evans', 'HR', 59000.00, '2019-06-11', 31, 'dorothye@example.com', 'USA'),
(34, 'Matthew', 'Carter', 'IT', 70000.00, '2020-01-29', 29, 'matthewc@example.com', 'Germany'),
(35, NULL, 'Martinez', 'Finance', 51000.00, '2021-06-06', 22, NULL, 'Canada'),
(36, 'Daniel', 'Perez', 'Marketing', 83000.00, '2021-07-01', 30, 'danielp@example.com', 'UK'),
(37, 'Catherine', 'Roberts', 'HR', 60000.00, '2020-09-19', 27, 'catheriner@gmail.com', 'USA'),
(38, 'Ronald', NULL, 'IT', 68000.00, '2017-02-04', 39, NULL, 'Germany'),
(39, 'Angela', 'Jenkins', 'Finance', 52000.00, '2018-04-23', 34, 'angelaj@example.com', 'Canada'),
(40, 'Gary', 'Wright', 'Marketing', 87000.00, '2021-01-10', 29, NULL, 'UK');


DROP TABLE IF EXISTS Products_Discounted;

CREATE TABLE Products_Discounted (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2),
    Category VARCHAR(50),
    StockQuantity INT
);

INSERT INTO Products_Discounted VALUES
(1, 'Gaming Laptop', 950.00, 'Electronics', 25),
(2, 'High-End Smartphone', 750.00, 'Electronics', 45),
(3, 'Convertible Tablet', 350.00, 'Electronics', 35),
(4, 'Ultra-Wide Monitor', 220.00, 'Electronics', 55),
(5, 'Mechanical Keyboard', 45.00, 'Accessories', 90),
(6, 'Wireless Mouse', 25.00, 'Accessories', 110),
(7, 'Ergonomic Chair', 130.00, 'Furniture', 75),
(8, 'Standing Desk', 190.00, 'Furniture', 70),
(9, 'Luxury Pen', 4.50, 'Stationery', 280),
(10, 'Leather Notebook', 9.00, 'Stationery', 480),
(11, 'Laser Printer', 160.00, 'Electronics', 20),
(12, 'DSLR Camera', 480.00, 'Electronics', 35),
(13, 'LED Flashlight', 20.00, 'Tools', 190),
(14, 'Designer Shirt', 28.00, 'Clothing', 140),
(15, 'Slim Fit Jeans', 40.00, 'Clothing', 110),
(16, 'Winter Jacket', 70.00, 'Clothing', 60),
(17, 'Running Shoes', 55.00, 'Clothing', 90),
(18, 'Wool Hat', 18.00, 'Accessories', 45),
(19, 'Thermal Socks', 9.00, 'Clothing', 180),
(20, 'Graphic T-Shirt', 22.00, 'Clothing', 140),
(21, 'Desk Lamp', 55.00, 'Furniture', 35),
(22, 'Marble Coffee Table', 95.00, 'Furniture', 30),
(23, 'Hardcover Book', 13.00, 'Stationery', 230),
(24, 'Persian Rug', 85.00, 'Furniture', 50),
(25, 'Glass Cup', 4.50, 'Accessories', 470),
(26, 'Leather Bag', 22.00, 'Accessories', 270),
(27, 'Recliner Couch', 420.00, 'Furniture', 10),
(28, 'Smart Fridge', 570.00, 'Electronics', 15),
(29, 'Gas Stove', 460.00, 'Electronics', 12),
(30, 'Compact Microwave', 100.00, 'Electronics', 20),
(31, 'Split Air Conditioner', 320.00, 'Electronics', 8),
(32, 'Front-Load Washing Machine', 410.00, 'Electronics', 12),
(33, 'High-Efficiency Dryer', 370.00, 'Electronics', 8),
(34, 'Ionic Hair Dryer', 27.00, 'Accessories', 90),
(35, 'Steam Iron', 38.00, 'Electronics', 45),
(36, 'Espresso Maker', 45.00, 'Electronics', 55),
(37, 'Portable Blender', 32.00, 'Electronics', 35),
(38, 'Cold Press Juicer', 50.00, 'Electronics', 28),
(39, 'Smart Toaster', 36.00, 'Electronics', 65),
(40, 'Compact Dishwasher', 470.00, 'Electronics', 18);





DROP TABLE IF EXISTS Sales;

CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    CustomerID INT,
    SaleDate DATE,
    SaleAmount DECIMAL(10, 2)
);

INSERT INTO Sales (SaleID, ProductID, CustomerID, SaleDate, SaleAmount) VALUES
(1, 1, 1, '2023-01-01', 150.00),
(2, 2, 2, '2023-01-02', 200.00),
(3, 3, 3, '2023-01-03', 250.00),
(4, 4, 4, '2023-01-04', 300.00),
(5, 5, 5, '2023-01-05', 350.00),
(6, 6, 6, '2023-01-06', 400.00),
(7, 7, 7, '2023-01-07', 450.00),
(8, 8, 8, '2023-01-08', 500.00),
(9, 9, 9, '2023-01-09', 550.00),
(10, 10, 10, '2023-01-10', 600.00),
(11, 1, 1, '2023-01-11', 150.00),
(12, 2, 2, '2023-01-12', 200.00),
(13, 3, 3, '2023-01-13', 250.00),
(14, 4, 4, '2023-01-14', 300.00),
(15, 5, 5, '2023-01-15', 350.00),
(16, 6, 6, '2023-01-16', 400.00),
(17, 7, 7, '2023-01-17', 450.00),
(18, 8, 8, '2023-01-18', 500.00),
(19, 9, 9, '2023-01-19', 550.00),
(20, 10, 10, '2023-01-20', 600.00),
(21, 1, 2, '2023-01-21', 150.00),
(22, 2, 3, '2023-01-22', 200.00),
(23, 3, 4, '2023-01-23', 250.00),
(24, 4, 5, '2023-01-24', 300.00),
(25, 5, 6, '2023-01-25', 350.00),
(26, 6, 7, '2023-01-26', 400.00),
(27, 7, 8, '2023-01-27', 450.00),
(28, 8, 9, '2023-01-28', 500.00),
(29, 9, 10, '2023-01-29', 550.00),
(30, 10, 1, '2023-01-30', 600.00),
(31, 1, 2, '2023-02-01', 150.00),
(32, 2, 3, '2023-02-02', 200.00),
(33, 3, 4, '2023-02-03', 250.00),
(34, 4, 5, '2023-02-04', 300.00),
(35, 5, 6, '2023-02-05', 350.00),
(36, 6, 7, '2023-02-06', 400.00),
(37, 7, 8, '2023-02-07', 450.00),
(38, 8, 9, '2023-02-08', 500.00),
(39, 9, 10, '2023-02-09', 550.00),
(40, 10, 1, '2023-02-10', 600.00);


DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS Products;
DROP TABLE IF EXISTS Customers;



CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2),
    Category VARCHAR(50),
    StockQuantity INT
);

INSERT INTO Products VALUES
(1, 'Laptop', 1200.00, 'Electronics', 30),
(2, 'Smartphone', 800.00, 'Electronics', 50),
(3, 'Tablet', 400.00, 'Electronics', 40),
(4, 'Monitor', 250.00, 'Electronics', 60),
(5, 'Keyboard', 50.00, 'Accessories', 100),
(6, 'Mouse', 30.00, 'Accessories', 120),
(7, 'Chair', 150.00, 'Furniture', 80),
(8, 'Desk', 200.00, 'Furniture', 75),
(9, 'Pen', 5.00, 'Stationery', 300),
(10, 'Notebook', 10.00, 'Stationery', 500),
(11, 'Printer', 180.00, 'Electronics', 25),
(12, 'Camera', 500.00, 'Electronics', 40),
(13, 'Flashlight', 25.00, 'Tools', 200),
(14, 'Shirt', 30.00, 'Clothing', 150),
(15, 'Jeans', 45.00, 'Clothing', 120),
(16, 'Jacket', 80.00, 'Clothing', 70),
(17, 'Shoes', 60.00, 'Clothing', 100),
(18, 'Hat', 20.00, 'Accessories', 50),
(19, 'Socks', 10.00, 'Clothing', 200),
(20, 'T-Shirt', 25.00, 'Clothing', 150),
(21, 'Lamp', 60.00, 'Furniture', 40),
(22, 'Coffee Table', 100.00, 'Furniture', 35),
(23, 'Book', 15.00, 'Stationery', 250),
(24, 'Rug', 90.00, 'Furniture', 60),
(25, 'Cup', 5.00, 'Accessories', 500),
(26, 'Bag', 25.00, 'Accessories', 300),
(27, 'Couch', 450.00, 'Furniture', 15),
(28, 'Fridge', 600.00, 'Electronics', 20),
(29, 'Stove', 500.00, 'Electronics', 15),
(30, 'Microwave', 120.00, 'Electronics', 25),
(31, 'Air Conditioner', 350.00, 'Electronics', 10),
(32, 'Washing Machine', 450.00, 'Electronics', 15),
(33, 'Dryer', 400.00, 'Electronics', 10),
(34, 'Hair Dryer', 30.00, 'Accessories', 100),
(35, 'Iron', 40.00, 'Electronics', 50),
(36, 'Coffee Maker', 50.00, 'Electronics', 60),
(37, 'Blender', 35.00, 'Electronics', 40),
(38, 'Juicer', 55.00, 'Electronics', 30),
(39, 'Toaster', 40.00, 'Electronics', 70),
(40, 'Dishwasher', 500.00, 'Electronics', 20);






CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(50),
    Address VARCHAR(255),
    City VARCHAR(100),
    State VARCHAR(100),
    PostalCode VARCHAR(20),
    Country VARCHAR(100)
);

--2. Insert 40 Rows into Customers Table
INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Phone, Address, City, State, PostalCode, Country) VALUES
(1, 'John', 'Doe', 'johndoe@gmail.com', '555-1234', '123 Elm St', 'New York', 'NY', '10001', 'USA'),
(2, 'Jane', 'Smith', 'janesmith@yahoo.com', '555-2345', '456 Oak St', 'Los Angeles', 'CA', '90001', 'USA'),
(3, 'Alice', 'Johnson', 'alicej@outlook.com', '555-3456', '789 Pine St', 'Toronto', 'ON', 'M4B1B3', 'Canada'),
(4, 'Bob', 'Brown', 'bobbrown@hotmail.com', '555-4567', '101 Maple St', 'Vancouver', 'BC', 'V5K0A1', 'Canada'),
(5, 'Charlie', 'Davis', 'charliedavis@gmail.com', '555-5678', '202 Birch St', 'Sydney', 'NSW', '2000', 'Australia'),
(6, 'David', 'Martinez', 'davidm@live.com', '555-6789', '303 Cedar St', 'Melbourne', 'VIC', '3000', 'Australia'),
(7, 'Emily', 'Garcia', 'emilyg@yahoo.com', '555-7890', '404 Redwood St', 'London', 'England', 'SW1A 1AA', 'UK'),
(8, 'Frank', 'Hernandez', 'frankh@outlook.com', '555-8901', '505 Willow St', 'Manchester', 'England', 'M1 1AE', 'UK'),
(9, 'Grace', 'Lopez', 'gracel@gmail.com', '555-9012', '606 Aspen St', 'Birmingham', 'England', 'B1 1AA', 'UK'),
(10, 'Helen', 'Gonzalez', 'heleng@yahoo.com', '555-0123', '707 Fir St', 'Berlin', 'BE', '10117', 'Germany'),
(11, 'Irene', 'Perez', 'irenep@hotmail.com', '555-1234', '808 Maple Ave', 'Munich', 'BY', '80331', 'Germany'),
(12, 'Jack', 'Wilson', 'jackw@live.com', '555-2345', '909 Oak Ave', 'Hamburg', 'HH', '20095', 'Germany'),
(13, 'Kim', 'Anderson', 'kima@gmail.com', '555-3456', '111 Pine Ave', 'Paris', '�le-de-France', '75001', 'France'),
(14, 'Liam', 'Thomas', 'liamt@yahoo.com', '555-4567', '222 Cedar Ave', 'Lyon', 'Auvergne-Rh�ne-Alpes', '69001', 'France'),
(15, 'Megan', 'Taylor', 'megant@outlook.com', '555-5678', '333 Redwood Ave', 'Marseille', 'Provence-Alpes-C�te Azur', '13001', 'France'),
(16, 'Nathan', 'Moore', 'nathanm@hotmail.com', '555-6789', '444 Willow Ave', 'Tokyo', 'TK', '100-0001', 'Japan'),
(17, 'Olivia', 'Jackson', 'oliviaj@gmail.com', '555-7890', '555 Birch Ave', 'Osaka', 'OS', '530-0001', 'Japan'),
(18, 'Paul', 'White', 'paulw@yahoo.com', '555-8901', '666 Maple Blvd', 'Kyoto', 'KY', '600-8001', 'Japan'),
(19, 'Quincy', 'Lee', 'quincyl@outlook.com', '555-9012', '777 Oak Blvd', 'Seoul', 'SO', '04547', 'South Korea'),
(20, 'Rachel', 'Harris', 'rachelh@hotmail.com', '555-0123', '888 Pine Blvd', 'Busan', 'BU', '48058', 'South Korea'),
(21, 'Sam', 'Clark', 'samc@gmail.com', '555-1234', '999 Cedar Blvd', 'Incheon', 'IC', '22382', 'South Korea'),
(22, 'Tina', 'Allen', 'tinaallen@yahoo.com', '555-2345', '1010 Redwood Blvd', 'Mexico City', 'CMX', '01000', 'Mexico'),
(23, 'Ursula', 'Scott', 'ursulas@outlook.com', '555-3456', '1111 Willow Blvd', 'Guadalajara', 'JAL', '44100', 'Mexico'),
(24, 'Victor', 'Adams', 'victora@hotmail.com', '555-4567', '1212 Birch Blvd', 'Monterrey', 'NLE', '64000', 'Mexico'),
(25, 'Walter', 'Baker', 'walterb@live.com', '555-5678', '1313 Oak Blvd', 'New York', 'NY', '10001', 'USA'),
(26, 'Xander', 'Nelson', 'xandern@gmail.com', '555-6789', '1414 Cedar Blvd', 'Los Angeles', 'CA', '90001', 'USA'),
(27, 'Yvonne', 'Carter', 'yvonnec@yahoo.com', '555-7890', '1515 Maple Dr', 'Chicago', 'IL', '60601', 'USA'),
(28, 'Zane', 'Mitchell', 'zanem@outlook.com', '555-8901', '1616 Redwood Dr', 'Houston', 'TX', '77001', 'USA'),
(29, 'Anna', 'Roberts', 'annar@hotmail.com', '555-9012', '1717 Willow Dr', 'Sydney', 'NSW', '2000', 'Australia'),
(30, 'Ben', 'King', 'benk@live.com', '555-0123', '1818 Birch Dr', 'Melbourne', 'VIC', '3000', 'Australia'),
(31, 'Chloe', 'Green', 'chloeg@gmail.com', '555-1234', '1919 Oak Dr', 'Toronto', 'ON', 'M4B1B3', 'Canada'),
(32, 'Daniel', 'Evans', 'daniele@yahoo.com', '555-2345', '2020 Cedar Dr', 'Vancouver', 'BC', 'V5K0A1', 'Canada'),
(33, 'Ella', 'Collins', 'ellac@outlook.com', '555-3456', '2121 Redwood Dr', 'London', 'England', 'SW1A 1AA', 'UK'),
(34, 'Finn', 'Morris', 'finnm@hotmail.com', '555-4567', '2222 Willow St', 'Manchester', 'England', 'M1 1AE', 'UK'),
(35, 'Grace', 'Lee', 'gracel@live.com', '555-5678', '2323 Birch St', 'Berlin', 'BE', '10117', 'Germany'),
(36, 'Holly', 'Martinez', 'hollym@gmail.com', '555-6789', '2424 Oak St', 'Munich', 'BY', '80331', 'Germany'),
(37, 'Ian', 'Robinson', 'ianr@yahoo.com', '555-7890', '2525 Cedar St', 'Warsaw', 'WA', '00-001', 'Poland'),
(38, 'Jasmine', 'Walker', 'jasminew@outlook.com', '555-8901', '2626 Redwood St', 'Lisbon', 'LI', '1100-148', 'Portugal'),
(39, 'Kyle', 'Young', 'kyley@hotmail.com', '555-9012', '2727 Willow St', 'Pittsburgh', 'PA', '15201','USA'),
(40, 'Liam', 'Harris', 'liamh@live.com', '555-0123', '2828 Birch St', 'Richmond', 'VA', '23220','USA');


CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    ProductID INT,
    OrderDate DATE,
    Quantity INT,
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Insert 40 rows into Orders with random dates and years
INSERT INTO Orders VALUES
(1, 1, 2, '2023-05-14', 1, 800.00),
(2, 2, 3, '2024-09-07', 2, 800.00),
(3, 3, 4, '2022-11-22', 1, 250.00),
(4, 4, 5, '2021-03-30', 3, 150.00),
(5, 5, 6, '2025-07-19', 1, 30.00),
(6, 6, 7, '2022-08-25', 2, 300.00),
(7, 7, 8, '2024-06-10', 1, 200.00),
(8, 8, 9, '2021-12-04', 4, 40.00),
(9, 9, 10, '2023-02-18', 1, 10.00),
(10, 10, 11, '2025-09-27', 2, 360.00),
(11, 11, 12, '2023-10-11', 1, 500.00),
(12, 12, 13, '2024-04-03', 1, 25.00),
(13, 13, 14, '2022-07-29', 2, 60.00),
(14, 14, 15, '2021-01-22', 3, 135.00),
(15, 15, 16, '2025-11-15', 1, 80.00),
(16, 16, 17, '2022-10-08', 1, 60.00),
(17, 17, 18, '2023-06-21', 2, 40.00),
(18, 18, 19, '2021-09-13', 5, 50.00),
(19, 19, 20, '2025-03-05', 2, 50.00),
(20, 20, 21, '2024-08-14', 1, 60.00),
(21, 21, 22, '2022-12-01', 1, 100.00),
(22, 22, 23, '2023-09-09', 1, 15.00),
(23, 23, 24, '2021-07-18', 2, 180.00),
(24, 24, 25, '2025-06-23', 3, 15.00),
(25, 25, 26, '2023-03-12', 4, 100.00),
(26, 26, 27, '2022-04-07', 1, 450.00),
(27, 27, 28, '2024-11-30', 1, 600.00),
(28, 28, 29, '2021-02-25', 1, 500.00),
(29, 29, 30, '2025-05-28', 2, 240.00),
(30, 30, 31, '2023-08-20', 1, 350.00),
(31, 31, 32, '2022-01-17', 1, 450.00),
(32, 32, 33, '2025-09-10', 1, 40.00),
(33, 33, 34, '2021-04-04', 2, 100.00),
(34, 34, 35, '2024-07-15', 3, 120.00),
(35, 35, 36, '2022-10-31', 1, 60.00),
(36, 36, 37, '2023-12-22', 1, 35.00),
(37, 37, 38, '2021-06-06', 2, 110.00),
(38, 38, 39, '2025-02-01', 1, 40.00),
(39, 39, 40, '2023-11-26', 3, 120.00),
(40, 40, 1, '2024-03-09', 1, 1200.00);


Ответы 

+ 

 

Вот решения для каждого из 10 запросов:
1.	Выбрать 5 лучших сотрудников:
Код
    SELECT TOP 5 * FROM Сотрудники ORDER BY Зарплата DESC;
•	Примечание: Запрос предполагает, что под "лучшими" подразумеваются сотрудники с наибольшей зарплатой. Если есть другой критерий, например, по производительности, то следует изменить ORDER BY.
1.	Выбрать уникальные значения категории из таблицы «Товары»:
Код
    SELECT DISTINCT Категория FROM Товары;
1.	Выбрать продукты с ценой > 100:
Код
    SELECT * FROM Продукты WHERE Цена > 100;
1.	Выбрать клиентов, чьи имена начинаются с «А»:
Код
    SELECT * FROM Клиенты WHERE Имя LIKE 'А%';
1.	Упорядочить таблицу «Продукты» по цене в порядке возрастания:
Код
    SELECT * FROM Продукты ORDER BY Цена ASC;
1.	Фильтровать сотрудников с зарплатой >= 60000 и DepartmentName = 'HR':
Код
    SELECT * FROM Сотрудники WHERE Зарплата >= 60000 AND Отдел = 'HR';
1.	Использовать ISNULL для замены NULL в Email:
Код
    SELECT ISNULL(Email, 'noemail@example.com') AS Email FROM Сотрудники;
1.	Показать продукты с ценой от 50 до 100:
Код
    SELECT * FROM Продукты WHERE Цена BETWEEN 50 AND 100;
1.	Выбрать уникальные комбинации Category и ProductName из таблицы Products:
Код
    SELECT DISTINCT Категория, НазваниеПродукта FROM Продукты;
1.	Выбрать уникальные комбинации Category и ProductName, упорядоченные по ProductName в убывающем порядке:
Код
    SELECT DISTINCT Категория, НазваниеПродукта
    FROM Продукты
    ORDER BY НазваниеПродукта DESC;

 


 

Вот запросы SQL для решения ваших задач среднего уровня:
1.	Выбрать 10 лучших товаров по цене:
Код
    SELECT * FROM Товары ORDER BY Цена DESC LIMIT 10;
•	Пояснение: ORDER BY Цена DESC сортирует таблицу по столбцу "Цена" в убывающем порядке, а LIMIT 10 ограничивает результат первыми 10 строками. 
1.	Использовать COALESCE для получения первого не-NULL имени:
Код
    SELECT COALESCE(FirstName, LastName) AS ИмяСотрудника FROM Employees;
•	Пояснение: COALESCE возвращает первое не-NULL значение из списка столбцов. Если FirstName NULL, будет использоваться LastName. 
1.	Выбрать уникальную категорию и цену:
Код
    SELECT DISTINCT Категория, Цена FROM Товары;
•	Пояснение: DISTINCT удаляет повторяющиеся комбинации столбцов "Категория" и "Цена", чтобы показать только уникальные пары. 
1.	Фильтр по возрасту или отделу маркетинга:
Код
    SELECT * FROM Сотрудники WHERE (Возраст BETWEEN 30 AND 40) OR DepartmentName = 'Маркетинг';
•	Пояснение: BETWEEN 30 AND 40 выбирает сотрудников с возрастом от 30 до 40 лет включительно, а условие OR DepartmentName = 'Маркетинг' расширяет выборку для отдела маркетинга. 
1.	Выбрать строки 11-20 с OFFSET-FETCH:
Код
    SELECT * FROM Сотрудники ORDER BY Зарплата DESC OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;
•	Пояснение: OFFSET 10 ROWS пропускает первые 10 строк, а FETCH NEXT 10 ROWS ONLY выбирает следующие 10 строк (с 11-й по 20-ю). 
1.	Товары с ценой <= 1000 и количеством на складе > 50:
Код
    SELECT * FROM Товары WHERE Цена <= 1000 AND КоличествоНаСкладе > 50 ORDER BY КоличествоНаСкладе ASC;
•	Пояснение: Запрос фильтрует товары по двум условиям одновременно и сортирует результат по количеству на складе в порядке возрастания. 
1.	Товары, содержащие букву "e" в названии:
Код
    SELECT * FROM Products WHERE ProductName LIKE '%e%';
•	Пояснение: LIKE '%e%' находит все названия товаров, содержащие букву "e" в любом месте строки. 
1.	Фильтрация по отделу с помощью IN:
Код
    SELECT * FROM Сотрудники WHERE DepartmentName IN ('Отдел кадров', 'ИТ', 'Финансы');
•	Пояснение: Оператор IN позволяет выбрать сотрудников, чьи значения в DepartmentName присутствуют в указанном списке. 
1.	Список клиентов, отсортированный по городу и почтовому индексу:
Код
    SELECT * FROM Клиенты ORDER BY Город ASC, ПочтовыйИндекс DESC;
•	Пояснение: ORDER BY Город ASC сортирует клиентов по городу в алфавитном порядке, а ПочтовыйИндекс DESC затем сортирует внутри каждого города по почтовому индексу в убывающем порядке. 


   


   



Урок 5: Псевдонимы, объединения и условные столбцы
Все задачи должны быть решены с использованием/в MSSQL-SERVER.
✅ Псевдонимы ✅ UNION, UNION ALL, INTERSECT, EXCEPT ✅ Создание условных столбцов с помощью CASE и IIF ✅ Использование IF, WHILE
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
________________________________________
Задачи легкого уровня
1.	Напишите запрос, который использует псевдоним для переименования столбца ProductName в Name в таблице Products.
2.	Напишите запрос, который использует псевдоним для переименования таблицы «Клиенты» в «Клиенты» для удобства поиска.
3.	Используйте UNION для объединения результатов двух запросов, которые выбирают ProductName из Products и ProductName из Products_Discounted.
4.	Напишите запрос для поиска пересечения таблиц Products и Products_Discounted с помощью INTERSECT.
5.	Напишите запрос для выбора отдельных имен клиентов и соответствующих им стран с помощью SELECT DISTINCT.
6.	Напишите запрос, который использует CASE для создания условного столбца, который отображает «High», если Price > 1000, и «Low», если Price <= 1000 из таблицы Products.
7.	Используйте IIF для создания столбца, который отображает «Да», если StockQuantity > 100, и «Нет» в противном случае (таблица Products_Discounted, столбец StockQuantity).
________________________________________
Задачи среднего уровня
8.	Используйте UNION для объединения результатов двух запросов, которые выбирают ProductName из таблицы Products и ProductName из таблицы Products_Discounted.
9.	Напишите запрос, который возвращает разницу между таблицами Products и Products_Discounted, используя EXCEPT.
10.	Создайте условный столбец с использованием IIF, который покажет «Дорого», если цена больше 1000, и «Доступно», если меньше, из таблицы «Продукты».
11.	Напишите запрос, чтобы найти сотрудников в таблице «Сотрудники», у которых возраст < 25 или зарплата > 60000.
12.	Обновите зарплату сотрудника в зависимости от его отдела, увеличьте на 10%, если он работает в отделе кадров или EmployeeID = 5.
________________________________________
Задачи сложного уровня
13.	Напишите запрос, который использует оператор CASE для назначения значения «Верхний уровень», если сумма продажи > 500, «Средний уровень», если сумма продажи находится между 200 и 500, и «Низкий уровень» в противном случае. (Из таблицы «Продажи»)
14.	Используйте EXCEPT для поиска идентификаторов клиентов, которые разместили заказы, но не имеют соответствующей записи в таблице «Продажи».
15.	Напишите запрос, который использует оператор CASE для определения процента скидки в зависимости от количества приобретенных товаров. Используйте таблицу заказов. Результат должен содержать идентификатор клиента, количество и процент скидки. Скидка должна применяться следующим образом: 1 товар: 3%; от 1 до 3 товаров: 5%; в противном случае: 7%
Необходимые таблицы:
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2),
    Category VARCHAR(50),
    StockQuantity INT
);

INSERT INTO Products VALUES
(1, 'Laptop', 1200.00, 'Electronics', 30),
(2, 'Smartphone', 800.00, 'Electronics', 50),
(3, 'Tablet', 400.00, 'Electronics', 40),
(4, 'Monitor', 250.00, 'Electronics', 60),
(5, 'Keyboard', 50.00, 'Accessories', 100),
(6, 'Mouse', 30.00, 'Accessories', 120),
(7, 'Chair', 150.00, 'Furniture', 80),
(8, 'Desk', 200.00, 'Furniture', 75),
(9, 'Pen', 5.00, 'Stationery', 300),
(10, 'Notebook', 10.00, 'Stationery', 500),
(11, 'Printer', 180.00, 'Electronics', 25),
(12, 'Camera', 500.00, 'Electronics', 40),
(13, 'Flashlight', 25.00, 'Tools', 200),
(14, 'Shirt', 30.00, 'Clothing', 150),
(15, 'Jeans', 45.00, 'Clothing', 120),
(16, 'Jacket', 80.00, 'Clothing', 70),
(17, 'Shoes', 60.00, 'Clothing', 100),
(18, 'Hat', 20.00, 'Accessories', 50),
(19, 'Socks', 10.00, 'Clothing', 200),
(20, 'T-Shirt', 25.00, 'Clothing', 150),
(21, 'Lamp', 60.00, 'Furniture', 40),
(22, 'Coffee Table', 100.00, 'Furniture', 35),
(23, 'Book', 15.00, 'Stationery', 250),
(24, 'Rug', 90.00, 'Furniture', 60),
(25, 'Cup', 5.00, 'Accessories', 500),
(26, 'Bag', 25.00, 'Accessories', 300),
(27, 'Couch', 450.00, 'Furniture', 15),
(28, 'Fridge', 600.00, 'Electronics', 20),
(29, 'Stove', 500.00, 'Electronics', 15),
(30, 'Microwave', 120.00, 'Electronics', 25),
(31, 'Air Conditioner', 350.00, 'Electronics', 10),
(32, 'Washing Machine', 450.00, 'Electronics', 15),
(33, 'Dryer', 400.00, 'Electronics', 10),
(34, 'Hair Dryer', 30.00, 'Accessories', 100),
(35, 'Iron', 40.00, 'Electronics', 50),
(36, 'Coffee Maker', 50.00, 'Electronics', 60),
(37, 'Blender', 35.00, 'Electronics', 40),
(38, 'Juicer', 55.00, 'Electronics', 30),
(39, 'Toaster', 40.00, 'Electronics', 70),
(40, 'Dishwasher', 500.00, 'Electronics', 20);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(50),
    Address VARCHAR(255),
    City VARCHAR(100),
    State VARCHAR(100),
    PostalCode VARCHAR(20),
    Country VARCHAR(100)
);

--2. Insert 40 Rows into Customers Table
INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Phone, Address, City, State, PostalCode, Country) VALUES
(1, 'John', 'Doe', 'johndoe@gmail.com', '555-1234', '123 Elm St', 'New York', 'NY', '10001', 'USA'),
(2, 'Jane', 'Smith', 'janesmith@yahoo.com', '555-2345', '456 Oak St', 'Los Angeles', 'CA', '90001', 'USA'),
(3, 'Alice', 'Johnson', 'alicej@outlook.com', '555-3456', '789 Pine St', 'Toronto', 'ON', 'M4B1B3', 'Canada'),
(4, 'Bob', 'Brown', 'bobbrown@hotmail.com', '555-4567', '101 Maple St', 'Vancouver', 'BC', 'V5K0A1', 'Canada'),
(5, 'Charlie', 'Davis', 'charliedavis@gmail.com', '555-5678', '202 Birch St', 'Sydney', 'NSW', '2000', 'Australia'),
(6, 'David', 'Martinez', 'davidm@live.com', '555-6789', '303 Cedar St', 'Melbourne', 'VIC', '3000', 'Australia'),
(7, 'Emily', 'Garcia', 'emilyg@yahoo.com', '555-7890', '404 Redwood St', 'London', 'England', 'SW1A 1AA', 'UK'),
(8, 'Frank', 'Hernandez', 'frankh@outlook.com', '555-8901', '505 Willow St', 'Manchester', 'England', 'M1 1AE', 'UK'),
(9, 'Grace', 'Lopez', 'gracel@gmail.com', '555-9012', '606 Aspen St', 'Birmingham', 'England', 'B1 1AA', 'UK'),
(10, 'Helen', 'Gonzalez', 'heleng@yahoo.com', '555-0123', '707 Fir St', 'Berlin', 'BE', '10117', 'Germany'),
(11, 'Irene', 'Perez', 'irenep@hotmail.com', '555-1234', '808 Maple Ave', 'Munich', 'BY', '80331', 'Germany'),
(12, 'Jack', 'Wilson', 'jackw@live.com', '555-2345', '909 Oak Ave', 'Hamburg', 'HH', '20095', 'Germany'),
(13, 'Kim', 'Anderson', 'kima@gmail.com', '555-3456', '111 Pine Ave', 'Paris', '�le-de-France', '75001', 'France'),
(14, 'Liam', 'Thomas', 'liamt@yahoo.com', '555-4567', '222 Cedar Ave', 'Lyon', 'Auvergne-Rh�ne-Alpes', '69001', 'France'),
(15, 'Megan', 'Taylor', 'megant@outlook.com', '555-5678', '333 Redwood Ave', 'Marseille', 'Provence-Alpes-C�te Azur', '13001', 'France'),
(16, 'Nathan', 'Moore', 'nathanm@hotmail.com', '555-6789', '444 Willow Ave', 'Tokyo', 'TK', '100-0001', 'Japan'),
(17, 'Olivia', 'Jackson', 'oliviaj@gmail.com', '555-7890', '555 Birch Ave', 'Osaka', 'OS', '530-0001', 'Japan'),
(18, 'Paul', 'White', 'paulw@yahoo.com', '555-8901', '666 Maple Blvd', 'Kyoto', 'KY', '600-8001', 'Japan'),
(19, 'Quincy', 'Lee', 'quincyl@outlook.com', '555-9012', '777 Oak Blvd', 'Seoul', 'SO', '04547', 'South Korea'),
(20, 'Rachel', 'Harris', 'rachelh@hotmail.com', '555-0123', '888 Pine Blvd', 'Busan', 'BU', '48058', 'South Korea'),
(21, 'Sam', 'Clark', 'samc@gmail.com', '555-1234', '999 Cedar Blvd', 'Incheon', 'IC', '22382', 'South Korea'),
(22, 'Tina', 'Allen', 'tinaallen@yahoo.com', '555-2345', '1010 Redwood Blvd', 'Mexico City', 'CMX', '01000', 'Mexico'),
(23, 'Ursula', 'Scott', 'ursulas@outlook.com', '555-3456', '1111 Willow Blvd', 'Guadalajara', 'JAL', '44100', 'Mexico'),
(24, 'Victor', 'Adams', 'victora@hotmail.com', '555-4567', '1212 Birch Blvd', 'Monterrey', 'NLE', '64000', 'Mexico'),
(25, 'Walter', 'Baker', 'walterb@live.com', '555-5678', '1313 Oak Blvd', 'New York', 'NY', '10001', 'USA'),
(26, 'Xander', 'Nelson', 'xandern@gmail.com', '555-6789', '1414 Cedar Blvd', 'Los Angeles', 'CA', '90001', 'USA'),
(27, 'Yvonne', 'Carter', 'yvonnec@yahoo.com', '555-7890', '1515 Maple Dr', 'Chicago', 'IL', '60601', 'USA'),
(28, 'Zane', 'Mitchell', 'zanem@outlook.com', '555-8901', '1616 Redwood Dr', 'Houston', 'TX', '77001', 'USA'),
(29, 'Anna', 'Roberts', 'annar@hotmail.com', '555-9012', '1717 Willow Dr', 'Sydney', 'NSW', '2000', 'Australia'),
(30, 'Ben', 'King', 'benk@live.com', '555-0123', '1818 Birch Dr', 'Melbourne', 'VIC', '3000', 'Australia'),
(31, 'Chloe', 'Green', 'chloeg@gmail.com', '555-1234', '1919 Oak Dr', 'Toronto', 'ON', 'M4B1B3', 'Canada'),
(32, 'Daniel', 'Evans', 'daniele@yahoo.com', '555-2345', '2020 Cedar Dr', 'Vancouver', 'BC', 'V5K0A1', 'Canada'),
(33, 'Ella', 'Collins', 'ellac@outlook.com', '555-3456', '2121 Redwood Dr', 'London', 'England', 'SW1A 1AA', 'UK'),
(34, 'Finn', 'Morris', 'finnm@hotmail.com', '555-4567', '2222 Willow St', 'Manchester', 'England', 'M1 1AE', 'UK'),
(35, 'Grace', 'Lee', 'gracel@live.com', '555-5678', '2323 Birch St', 'Berlin', 'BE', '10117', 'Germany'),
(36, 'Holly', 'Martinez', 'hollym@gmail.com', '555-6789', '2424 Oak St', 'Munich', 'BY', '80331', 'Germany'),
(37, 'Ian', 'Robinson', 'ianr@yahoo.com', '555-7890', '2525 Cedar St', 'Warsaw', 'WA', '00-001', 'Poland'),
(38, 'Jasmine', 'Walker', 'jasminew@outlook.com', '555-8901', '2626 Redwood St', 'Lisbon', 'LI', '1100-148', 'Portugal'),
(39, 'Kyle', 'Young', 'kyley@hotmail.com', '555-9012', '2727 Willow St', 'Pittsburgh', 'PA', '15201','USA'),
(40, 'Liam', 'Harris', 'liamh@live.com', '555-0123', '2828 Birch St', 'Richmond', 'VA', '23220','USA');


CREATE TABLE Products_Discounted (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2),
    Category VARCHAR(50),
    StockQuantity INT
);

INSERT INTO Products_Discounted VALUES
(1, 'Gaming Laptop', 950.00, 'Electronics', 25),
(2, 'Smartphone', 750.00, 'Electronics', 45),
(3, 'Convertible Tablet', 350.00, 'Electronics', 35),
(4, 'Ultra-Wide Monitor', 220.00, 'Electronics', 55),
(5, 'Mechanical Keyboard', 45.00, 'Accessories', 90),
(6, 'Wireless Mouse', 25.00, 'Accessories', 110),
(7, 'Chair', 130.00, 'Furniture', 75),
(8, 'Standing Desk', 190.00, 'Furniture', 70),
(9, 'Luxury Pen', 4.50, 'Stationery', 280),
(10, 'Leather Notebook', 9.00, 'Stationery', 480),
(11, 'Laser Printer', 160.00, 'Electronics', 20),
(12, 'DSLR Camera', 480.00, 'Electronics', 35),
(13, 'LED Flashlight', 20.00, 'Tools', 190),
(14, 'Designer Shirt', 28.00, 'Clothing', 140),
(15, 'Jeans', 40.00, 'Clothing', 110),
(16, 'Winter Jacket', 70.00, 'Clothing', 60),
(17, 'Running Shoes', 55.00, 'Clothing', 90),
(18, 'Wool Hat', 18.00, 'Accessories', 45),
(19, 'Thermal Socks', 9.00, 'Clothing', 180),
(20, 'T-Shirt', 22.00, 'Clothing', 140),
(21, 'Desk Lamp', 55.00, 'Furniture', 35),
(22, 'Marble Coffee Table', 95.00, 'Furniture', 30),
(23, 'Hardcover Book', 13.00, 'Stationery', 230),
(24, 'Persian Rug', 85.00, 'Furniture', 50),
(25, 'Glass Cup', 4.50, 'Accessories', 470),
(26, 'Leather Bag', 22.00, 'Accessories', 270),
(27, 'Recliner Couch', 420.00, 'Furniture', 10),
(28, 'Smart Fridge', 570.00, 'Electronics', 15),
(29, 'Gas Stove', 460.00, 'Electronics', 12),
(30, 'Compact Microwave', 100.00, 'Electronics', 20),
(31, 'Split Air Conditioner', 320.00, 'Electronics', 8),
(32, 'Front-Load Washing Machine', 410.00, 'Electronics', 12),
(33, 'High-Efficiency Dryer', 370.00, 'Electronics', 8),
(34, 'Ionic Hair Dryer', 27.00, 'Accessories', 90),
(35, 'Steam Iron', 38.00, 'Electronics', 45),
(36, 'Espresso Maker', 45.00, 'Electronics', 55),
(37, 'Portable Blender', 32.00, 'Electronics', 35),
(38, 'Cold Press Juicer', 50.00, 'Electronics', 28),
(39, 'Smart Toaster', 36.00, 'Electronics', 65),
(40, 'Compact Dishwasher', 470.00, 'Electronics', 18);

CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    CustomerID INT,
    SaleDate DATE,
    SaleAmount DECIMAL(10, 2)
);

INSERT INTO Sales (SaleID, ProductID, CustomerID, SaleDate, SaleAmount) VALUES
(1, 1, 1, '2023-01-01', 150.00),
(2, 2, 2, '2023-01-02', 200.00),
(3, 3, 3, '2023-01-03', 250.00),
(4, 4, 4, '2023-01-04', 300.00),
(5, 5, 5, '2023-01-05', 350.00),
(6, 6, 6, '2023-01-06', 400.00),
(7, 7, 7, '2023-01-07', 450.00),
(8, 8, 8, '2023-01-08', 500.00),
(9, 9, 9, '2023-01-09', 550.00),
(10, 10, 10, '2023-01-10', 600.00),
(11, 1, 1, '2023-01-11', 150.00),
(12, 2, 2, '2023-01-12', 200.00),
(13, 3, 3, '2023-01-13', 250.00),
(14, 4, 4, '2023-01-14', 300.00),
(15, 5, 5, '2023-01-15', 350.00),
(16, 6, 6, '2023-01-16', 400.00),
(17, 7, 7, '2023-01-17', 450.00),
(18, 8, 8, '2023-01-18', 500.00),
(19, 9, 9, '2023-01-19', 550.00),
(20, 10, 10, '2023-01-20', 600.00),
(21, 1, 2, '2023-01-21', 150.00),
(22, 2, 3, '2023-01-22', 200.00),
(23, 3, 4, '2023-01-23', 250.00),
(24, 4, 5, '2023-01-24', 300.00),
(25, 5, 6, '2023-01-25', 350.00),
(26, 6, 7, '2023-01-26', 400.00),
(27, 7, 8, '2023-01-27', 450.00),
(28, 8, 9, '2023-01-28', 500.00),
(29, 9, 10, '2023-01-29', 550.00),
(30, 10, 1, '2023-01-30', 600.00),
(31, 1, 2, '2023-02-01', 150.00),
(32, 2, 3, '2023-02-02', 200.00),
(33, 3, 4, '2023-02-03', 250.00),
(34, 4, 5, '2023-02-04', 300.00),
(35, 5, 6, '2023-02-05', 350.00),
(36, 6, 7, '2023-02-06', 400.00),
(37, 7, 8, '2023-02-07', 450.00),
(38, 8, 9, '2023-02-08', 500.00),
(39, 9, 10, '2023-02-09', 550.00),
(40, 10, 1, '2023-02-10', 600.00);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    ProductID INT,
    OrderDate DATE,
    Quantity INT,
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Insert 40 rows into Orders with random dates and years
INSERT INTO Orders VALUES
(1, 1, 2, '2023-05-14', 1, 800.00),
(2, 2, 3, '2024-09-07', 2, 800.00),
(3, 3, 4, '2022-11-22', 1, 250.00),
(4, 4, 5, '2021-03-30', 3, 150.00),
(5, 5, 6, '2025-07-19', 1, 30.00),
(6, 6, 7, '2022-08-25', 2, 300.00),
(7, 7, 8, '2024-06-10', 1, 200.00),
(8, 8, 9, '2021-12-04', 4, 40.00),
(9, 9, 10, '2023-02-18', 1, 10.00),
(10, 10, 11, '2025-09-27', 2, 360.00),
(11, 11, 12, '2023-10-11', 1, 500.00),
(12, 12, 13, '2024-04-03', 1, 25.00),
(13, 13, 14, '2022-07-29', 2, 60.00),
(14, 14, 15, '2021-01-22', 3, 135.00),
(15, 15, 16, '2025-11-15', 1, 80.00),
(16, 16, 17, '2022-10-08', 1, 60.00),
(17, 17, 18, '2023-06-21', 2, 40.00),
(18, 18, 19, '2021-09-13', 5, 50.00),
(19, 19, 20, '2025-03-05', 2, 50.00),
(20, 20, 21, '2024-08-14', 1, 60.00),
(21, 21, 22, '2022-12-01', 1, 100.00),
(22, 22, 23, '2023-09-09', 1, 15.00),
(23, 23, 24, '2021-07-18', 2, 180.00),
(24, 24, 25, '2025-06-23', 3, 15.00),
(25, 25, 26, '2023-03-12', 4, 100.00),
(26, 26, 27, '2022-04-07', 1, 450.00),
(27, 27, 28, '2024-11-30', 1, 600.00),
(28, 28, 29, '2021-02-25', 1, 500.00),
(29, 29, 30, '2025-05-28', 2, 240.00),
(30, 30, 31, '2023-08-20', 1, 350.00),
(31, 31, 32, '2022-01-17', 1, 450.00),
(32, 32, 33, '2025-09-10', 1, 40.00),
(33, 33, 34, '2021-04-04', 2, 100.00),
(34, 34, 35, '2024-07-15', 3, 120.00),
(35, 35, 36, '2022-10-31', 1, 60.00),
(36, 36, 37, '2023-12-22', 1, 35.00),
(37, 37, 38, '2021-06-06', 2, 110.00),
(38, 38, 39, '2025-02-01', 1, 40.00),
(39, 39, 40, '2023-11-26', 3, 120.00),
(40, 40, 1, '2024-03-09', 1, 1200.00);


CREATE TABLE Invoices (
    InvoiceID INT PRIMARY KEY,
    CustomerID INT,
    InvoiceDate DATE,
    TotalAmount DECIMAL(10, 2)
);

INSERT INTO Invoices (InvoiceID, CustomerID, InvoiceDate, TotalAmount) VALUES
(1, 1, '2023-01-05', 150.00),
(2, 2, '2023-01-07', 200.00),
(3, 3, '2023-01-10', 250.00),
(4, 4, '2023-01-12', 300.00),
(5, 5, '2023-01-15', 350.00),
(6, 6, '2023-01-18', 400.00),
(7, 7, '2023-01-20', 450.00),
(8, 8, '2023-01-23', 500.00),
(9, 9, '2023-01-25', 550.00),
(10, 10, '2023-01-28', 600.00),
(11, 11, '2023-02-02', 150.00),
(12, 12, '2023-02-04', 200.00),
(13, 13, '2023-02-07', 250.00),
(14, 14, '2023-02-09', 300.00),
(15, 15, '2023-02-11', 350.00),
(16, 16, '2023-02-13', 400.00),
(17, 17, '2023-02-15', 450.00),
(18, 18, '2023-02-17', 500.00),
(19, 19, '2023-02-19', 550.00),
(20, 20, '2023-02-21', 600.00),
(21, 21, '2023-02-24', 150.00),
(22, 22, '2023-02-26', 200.00),
(23, 23, '2023-02-28', 250.00),
(24, 24, '2023-03-02', 300.00),
(25, 25, '2023-03-04', 350.00),
(26, 26, '2023-03-06', 400.00),
(27, 27, '2023-03-08', 450.00),
(28, 28, '2023-03-10', 500.00),
(29, 29, '2023-03-12', 550.00),
(30, 30, '2023-03-14', 600.00),
(31, 31, '2023-03-17', 150.00),
(32, 32, '2023-03-19', 200.00),
(33, 33, '2023-03-21', 250.00),
(34, 34, '2023-03-23', 300.00),
(35, 35, '2023-03-25', 350.00),
(36, 36, '2023-03-27', 400.00),
(37, 37, '2023-03-29', 450.00),
(38, 38, '2023-03-31', 500.00),
(39, 39, '2023-04-02', 550.00),
(40, 40, '2023-04-04', 600.00);

CREATE TABLE OutOfStock (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2),
    Category VARCHAR(50),
    StockQuantity INT
);


INSERT INTO OutOfStock VALUES
(1, 'Gaming Console', 500.00, 'Electronics', 0),
(2, 'Smartwatch', 250.00, 'Electronics', 0),
(3, 'Wireless Earbuds', 150.00, 'Electronics', 0),
(4, 'Projector', 700.00, 'Electronics', 0),
(5, 'Mechanical Keyboard', 120.00, 'Accessories', 0),
(6, 'Wireless Mouse', 45.00, 'Accessories', 0),
(7, 'Office Chair', 250.00, 'Furniture', 0),
(8, 'Standing Desk', 400.00, 'Furniture', 0),
(9, 'Marker Set', 20.00, 'Stationery', 0),
(10, 'Sketchbook', 35.00, 'Stationery', 0),
(11, 'Scanner', 220.00, 'Electronics', 0),
(12, 'Drone', 800.00, 'Electronics', 0),
(13, 'Power Drill', 90.00, 'Tools', 0),
(14, 'Sweater', 55.00, 'Clothing', 0),
(15, 'Shorts', 30.00, 'Clothing', 0),
(16, 'Raincoat', 75.00, 'Clothing', 0),
(17, 'Sandals', 40.00, 'Clothing', 0),
(18, 'Gloves', 15.00, 'Accessories', 0),
(19, 'Necklace', 120.00, 'Accessories', 0),
(20, 'Sunglasses', 80.00, 'Accessories', 0),
(21, 'Bedside Lamp', 45.00, 'Furniture', 0),
(22, 'Bookshelf', 150.00, 'Furniture', 0),
(23, 'Dictionary', 25.00, 'Stationery', 0),
(24, 'Wall Clock', 60.00, 'Furniture', 0),
(25, 'Thermos', 35.00, 'Accessories', 0),
(26, 'Backpack', 60.00, 'Accessories', 0),
(27, 'Recliner', 550.00, 'Furniture', 0),
(28, 'Freezer', 750.00, 'Electronics', 0),
(29, 'Induction Cooktop', 300.00, 'Electronics', 0),
(30, 'Oven', 600.00, 'Electronics', 0),
(31, 'Humidifier', 90.00, 'Electronics', 0),
(32, 'Vacuum Cleaner', 250.00, 'Electronics', 0),
(33, 'Electric Kettle', 45.00, 'Electronics', 0),
(34, 'Smart Light Bulb', 30.00, 'Accessories', 0),
(35, 'Water Purifier', 120.00, 'Electronics', 0),
(36, 'Popcorn Maker', 50.00, 'Electronics', 0),
(37, 'Rice Cooker', 70.00, 'Electronics', 0),
(38, 'Food Processor', 90.00, 'Electronics', 0),
(39, 'Deep Fryer', 80.00, 'Electronics', 0),
(40, 'Robot Vacuum', 500.00, 'Electronics', 0);

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50) NULL,
    LastName VARCHAR(50) NULL,
    DepartmentName VARCHAR(50),
    Salary DECIMAL(10, 2),
    HireDate DATE,
    Age INT,
    Email VARCHAR(100) NULL,
    Country VARCHAR(50)
);

INSERT INTO Employees (EmployeeID, FirstName, LastName, DepartmentName, Salary, HireDate, Age, Email, Country) VALUES
(1, 'John', 'Doe', 'IT', 55000.00, '2020-01-01', 30, 'johndoe@example.com', 'USA'),
(2, 'Jane', 'Smith', 'HR', 65000.00, '2019-03-15', 28, 'janesmith@example.com', 'USA'),
(3, NULL, 'Johnson', 'Finance', 45000.00, '2021-05-10', 25, NULL, 'Canada'),
(4, 'James', 'Brown', 'Marketing', 60000.00, '2018-07-22', 35, 'jamesbrown@example.com', 'UK'),
(5, 'Patricia', NULL, 'HR', 70000.00, '2017-08-30', 40, NULL, 'USA'),
(6, 'Michael', 'Miller', 'IT', 75000.00, '2020-12-12', 27, 'michaelm@example.com', 'Germany'),
(7, 'Linda', NULL, 'Finance', 48000.00, '2016-11-02', 42, NULL, 'Canada'),
(8, 'David', 'Moore', 'Marketing', 85000.00, '2021-09-01', 29, 'davidm@example.com', 'UK'),
(9, 'Elizabeth', 'Taylor', 'HR', 60000.00, '2019-05-18', 31, 'elizabetht@example.com', 'USA'),
(10, 'William', NULL, 'IT', 64000.00, '2020-04-10', 26, NULL, 'Germany'),
(11, NULL, 'Thomas', 'Finance', 47000.00, '2017-01-25', 38, NULL, 'Canada'),
(12, 'Joseph', 'Jackson', 'Marketing', 78000.00, '2016-09-30', 44, 'josephj@example.com', 'UK'),
(13, 'Karen', 'White', 'HR', 59000.00, '2018-06-10', 33, 'karenw@example.com', 'USA'),
(14, 'Steven', NULL, 'IT', 71000.00, '2021-07-15', 24, NULL, 'Germany'),
(15, 'Nancy', 'Clark', 'Finance', 45000.00, '2020-02-20', 27, 'nancyc@example.com', 'Canada'),
(16, 'George', 'Lewis', 'Marketing', 80000.00, '2019-11-10', 36, 'georgel@example.com', 'UK'),
(17, 'Betty', NULL, 'HR', 55000.00, '2017-04-05', 41, NULL, 'USA'),
(18, 'Samuel', 'Walker', 'IT', 72000.00, '2021-03-22', 23, 'samuelw@example.com', 'Germany'),
(19, 'Helen', 'Hall', 'Finance', 49000.00, '2018-10-16', 34, 'helenh@example.com', 'Canada'),
(20, NULL, 'Allen', 'Marketing', 90000.00, '2015-08-11', 50, NULL, 'UK'),
(21, 'Betty', 'Young', 'HR', 53000.00, '2020-05-17', 28, 'bettyy@example.com', 'USA'),
(22, 'Frank', NULL, 'IT', 67000.00, '2021-02-02', 26, 'frankk@example.com', 'Germany'),
(23, 'Deborah', 'Scott', 'Finance', 47000.00, '2019-07-09', 29, NULL, 'Canada'),
(24, 'Matthew', 'Green', 'Marketing', 76000.00, '2021-01-15', 30, 'matthewg@example.com', 'UK'),
(25, NULL, 'Adams', 'HR', 54000.00, '2020-06-21', 27, NULL, 'USA'),
(26, 'Paul', 'Nelson', 'IT', 71000.00, '2018-12-03', 37, 'pauln@example.com', 'Germany'),
(27, 'Margaret', NULL, 'Finance', 46000.00, '2020-08-19', 25, 'margaretc@example.com', 'Canada'),
(28, 'Anthony', 'Mitchell', 'Marketing', 82000.00, '2021-04-10', 29, NULL, 'UK'),
(29, 'Lisa', 'Perez', 'HR', 60000.00, '2021-03-05', 24, 'lisap@example.com', 'USA'),
(30, NULL, 'Roberts', 'IT', 69000.00, '2019-09-24', 32, NULL, 'Germany'),
(31, 'Jessica', 'Gonzalez', 'Finance', 47000.00, '2017-12-13', 38, 'jessicag@example.com', 'Canada'),
(32, 'Brian', NULL, 'Marketing', 85000.00, '2018-11-05', 35, NULL, 'UK'),
(33, 'Dorothy', 'Evans', 'HR', 59000.00, '2019-06-11', 31, 'dorothye@example.com', 'USA'),
(34, 'Matthew', 'Carter', 'IT', 70000.00, '2020-01-29', 29, 'matthewc@example.com', 'Germany'),
(35, NULL, 'Martinez', 'Finance', 51000.00, '2021-06-06', 22, NULL, 'Canada'),
(36, 'Daniel', 'Perez', 'Marketing', 83000.00, '2021-07-01', 30, 'danielp@example.com', 'UK'),
(37, 'Catherine', 'Roberts', 'HR', 60000.00, '2020-09-19', 27, 'catheriner@example.com', 'USA'),
(38, 'Ronald', NULL, 'IT', 68000.00, '2017-02-04', 39, NULL, 'Germany'),
(39, 'Angela', 'Jenkins', 'Finance', 52000.00, '2018-04-23', 34, 'angelaj@example.com', 'Canada'),
(40, 'Gary', 'Wright', 'Marketing', 87000.00, '2021-01-10', 29, NULL, 'UK');


Ответы
Вот решения для ваших задач легкого уровня по SQL:
1. Псевдоним для столбца:
Код
SELECT ProductName AS Name
FROM Products;
Этот запрос выбирает столбец ProductName из таблицы Products и переименовывает его в Name для текущего запроса.
2. Псевдоним для таблицы:
Код
SELECT *
FROM Клиенты AS Клиенты_Поиска;
Этот запрос выбирает все данные из таблицы Клиенты и временно дает ей псевдоним Клиенты_Поиска.
3. Использование UNION:
Код
SELECT ProductName FROM Products
UNION
SELECT ProductName FROM Products_Discounted;
Оператор UNION объединяет уникальные результаты двух запросов, показывая все ProductName, которые есть в таблицах Products и Products_Discounted.
4. Использование INTERSECT:
Код
SELECT ProductName FROM Products
INTERSECT
SELECT ProductName FROM Products_Discounted;
Оператор INTERSECT возвращает только те ProductName, которые присутствуют в обеих таблицах (Products и Products_Discounted).
5. Использование SELECT DISTINCT:
Код
SELECT DISTINCT CustomerName, Country
FROM Customers;
Этот запрос выберет уникальные комбинации CustomerName и Country из таблицы Customers, предотвращая дублирование записей.
6. Использование CASE:
Код
SELECT
    CASE
        WHEN Price > 1000 THEN 'High'
        ELSE 'Low'
    END AS PriceCategory
FROM Products;
CASE-выражение создает новый столбец PriceCategory, где для товаров с ценой выше 1000 будет High, а для остальных — Low.
7. Использование IIF:
Код
SELECT
    IIF(StockQuantity > 100, 'Да', 'Нет') AS IsInStock
FROM Products_Discounted;
Функция IIF создает столбец IsInStock. Если StockQuantity больше 100, значение будет Да, иначе — Нет.
Вот решения для ваших задач SQL:
•	Объединение с помощью UNION:
Используйте UNION ALL для объединения всех продуктов из обеих таблиц или UNION для получения уникальных названий продуктов.
•	Разница с помощью EXCEPT:
Используйте EXCEPT для получения названий продуктов из Products, которых нет в Products_Discounted.
•	Условный столбец с IIF:
Создайте столбец с помощью IIF(Price > 1000, 'Дорого', 'Доступно') для вывода цены продуктов.
•	Поиск сотрудников:
Используйте WHERE с оператором OR для поиска сотрудников, чьи возраст < 25 или зарплата > 60000.
•	Обновление зарплаты:
Используйте UPDATE с SET и WHERE для увеличения зарплаты сотрудников в отделе кадров или с EmployeeID равным 5.
________________________________________
Вот примеры запросов для каждой задачи, предполагая стандартную структуру таблиц Products и Employees.
1. Объединение результатов двух запросов с помощью UNION
Этот запрос вернет объединенный список названий продуктов из обеих таблиц. UNION удалит дубликаты, а UNION ALL сохранит их.
Код
SELECT ProductName FROM Products
UNION
SELECT ProductName FROM Products_Discounted;
2. Разница между таблицами с помощью EXCEPT
Этот запрос выведет названия продуктов, которые есть в таблице Products, но отсутствуют в Products_Discounted.
Код
SELECT ProductName FROM Products
EXCEPT
SELECT ProductName FROM Products_Discounted;
3. Создание условного столбца с помощью IIF
Этот запрос добавит столбец "Цена", показывающий "Дорого" или "Доступно" в зависимости от цены.
Код
SELECT
    ProductName,
    IIF(Price > 1000, 'Дорого', 'Доступно') AS Цена
FROM Products;
4. Поиск сотрудников с возрастом < 25 или зарплатой > 60000
Этот запрос вернет сотрудников, которые соответствуют любому из заданных условий.
Код
SELECT *
FROM Employees
WHERE Age < 25 OR Salary > 60000;
5. Обновление зарплаты сотрудника
Этот запрос увеличит зарплату на 10% для сотрудников отдела кадров или сотрудника с EmployeeID = 5.
Код
UPDATE Employees
SET Salary = Salary * 1.10
WHERE Department = 'Кадры' OR EmployeeID = 5;
Вот запросы SQL, которые решают поставленные задачи:
1. Оператор CASE для уровня продажи
Код
SELECT
    сумма_продажи,
    CASE
        WHEN сумма_продажи > 500 THEN 'Верхний уровень'
        WHEN сумма_продажи BETWEEN 200 AND 500 THEN 'Средний уровень'
        ELSE 'Низкий уровень'
    END AS уровень_продажи
FROM
    Продажи;
•	Этот запрос использует CASE для присвоения категории уровню продажи, как указано в условии. 
2. Использование EXCEPT для поиска клиентов без записей о продажах
Код
SELECT id_клиента FROM Заказы
EXCEPT
SELECT id_клиента FROM Продажи;
•	Этот запрос вычисляет разницу между двумя наборами данных, находя id_клиента из таблицы Заказы, которые не существуют в таблице Продажи. 
3. Оператор CASE для процента скидки
Код
SELECT
    id_клиента,
    количество,
    CASE
        WHEN количество = 1 THEN 0.03 -- 3%
        WHEN количество BETWEEN 1 AND 3 THEN 0.05 -- 5%
        ELSE 0.07 -- 7%
    END AS процент_скидки
FROM
    Заказы;
•	Этот запрос определяет процент скидки на основе количества товаров в заказе, используя CASE для различных условий. 









Урок 6: Практика
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
Головоломка 1: Поиск различных ценностей
Вопрос: Объясните как минимум два способа нахождения различных значений на основе двух столбцов.
Входная таблица ( InputTbl):
| col1 | col2 |
|------|------|
| a    | b    |
| a    | b    |
| b    | a    |
| c    | d    |
| c    | d    |
| m    | n    |
| n    | m    |
Результат должен быть таким:
| col1 | col2 |
|------|------|
| a    | b    |
| c    | d    |
| m    | n    |
CREATE TABLE InputTbl (
    col1 VARCHAR(10),
    col2 VARCHAR(10)
);
    INSERT INTO InputTbl (col1, col2) VALUES 
('a', 'b'),
('a', 'b'),
('b', 'a'),
('c', 'd'),
('c', 'd'),
('m', 'n'),
('n', 'm');
________________________________________
Головоломка 2: Удаление строк со всеми нулями
Вопрос: Если все столбцы содержат нулевые значения, не отображать эту строку. В этом случае при выборке данных придётся удалить пятую строку.
Схема таблицы:
CREATE TABLE TestMultipleZero (
    A INT NULL,
    B INT NULL,
    C INT NULL,
    D INT NULL
);

INSERT INTO TestMultipleZero(A,B,C,D)
VALUES 
    (0,0,0,1),
    (0,0,1,0),
    (0,1,0,0),
    (1,0,0,0),
    (0,0,0,0),
    (1,1,1,0);
________________________________________
Головоломка 3: Найдите те, у которых нечетные идентификаторы
create table section1(id int, name varchar(20))
insert into section1 values (1, 'Been'),
       (2, 'Roma'),
       (3, 'Steven'),
       (4, 'Paulo'),
       (5, 'Genryh'),
       (6, 'Bruno'),
       (7, 'Fred'),
       (8, 'Andro')
Головоломка 4: Человек с наименьшим идентификатором (используйте таблицу из головоломки 3)
________________________________________
Головоломка 5: Человек с наивысшим идентификатором (используйте таблицу из головоломки 3)
________________________________________
Головоломка 6: Люди, чьи имена начинаются на букву «б» (используйте таблицу из головоломки 3)
________________________________________
Задача 7: Напишите запрос, который возвращает только те строки, в коде которых содержится символ подчеркивания _ (не подстановочный знак).
CREATE TABLE ProductCodes (
    Code VARCHAR(20)
);

INSERT INTO ProductCodes (Code) VALUES
('X-123'),
('X_456'),
('X#789'),
('X-001'),
('X%202'),
('X_ABC'),
('X#DEF'),
('X-999');

Домашние задания по уроку 7
Эти домашние задания охватывают следующие темы:
•	Агрегатные функции (MIN, MAX, COUNT, AVG, SUM)
•	Фильтрация агрегированных данных с помощью HAVING
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
________________________________________
🟢 Задания лёгкого уровня (10)
1.	Напишите запрос, чтобы найти минимальную (MIN) цену товара в таблице «Товары».
2.	Напишите запрос, чтобы найти максимальную (MAX) зарплату из таблицы «Сотрудники».
3.	Напишите запрос для подсчета количества строк в таблице «Клиенты».
4.	Напишите запрос для подсчета количества уникальных категорий продуктов из таблицы «Продукты».
5.	Напишите запрос, чтобы найти общую сумму продаж для продукта с идентификатором 7 в таблице «Продажи».
6.	Напишите запрос для расчета среднего возраста сотрудников в таблице «Сотрудники».
7.	Напишите запрос для подсчета количества сотрудников в каждом отделе.
8.	Напишите запрос, чтобы отобразить минимальную и максимальную цену товаров, сгруппированных по категориям. Используйте таблицу «Товары».
9.	Напишите запрос для расчета общего объема продаж на одного клиента в таблице «Продажи».
10.	Напишите запрос для фильтрации отделов, в которых насчитывается более 5 сотрудников, из таблицы «Сотрудники» (достаточно DeptID, если у вас нет DeptName).
________________________________________
🟠 Задачи среднего уровня (9)
11.	Напишите запрос для расчета общего объема продаж и среднего объема продаж для каждой категории продуктов из таблицы «Продажи».
12.	Напишите запрос на подсчет количества сотрудников отдела кадров.
13.	Напишите запрос, который находит самую высокую и самую низкую зарплату по отделам в таблице «Сотрудники». (Если у вас нет DeptName, достаточно DeptID).
14.	Напишите запрос для расчета средней зарплаты по отделу (достаточно DeptID, если у вас нет DeptName).
15.	Напишите запрос, чтобы отобразить среднюю зарплату и количество (*) сотрудников, работающих в каждом отделе (достаточно DeptID, если у вас нет DeptName).
16.	Напишите запрос для фильтрации категорий товаров со средней ценой более 400.
17.	Напишите запрос, который вычисляет общий объем продаж за каждый год в таблице «Продажи».
18.	Напишите запрос, чтобы отобразить список клиентов, которые разместили не менее 3 заказов.
19.	Напишите запрос, чтобы отфильтровать отделы со средними расходами на заработную плату более 60000. (Если у вас нет DeptName, достаточно DeptID).
________________________________________
🔴 Задания сложного уровня (6)
20.	Напишите запрос, который покажет среднюю цену для каждой категории товаров, а затем отфильтруйте категории со средней ценой больше 150.
21.	Напишите запрос для расчета общего объема продаж для каждого клиента, затем отфильтруйте результаты, включив только клиентов с общим объемом продаж более 1500.
22.	Напишите запрос, чтобы найти общую и среднюю зарплату сотрудников в каждом отделе, и отфильтруйте вывод, включив только отделы со средней зарплатой более 65000.
23.	Напишите запрос для поиска общей суммы заказов, которые весят более 50 долларов для каждого клиента, а также их наименьшей суммы покупок (наименьшая сумма может быть меньше 50, используйте таблицу tsql2012.sales.orders, столбец freight, попросите своего помощника предоставить базу данных TSQL2012).
24.	Напишите запрос, который вычисляет общий объем продаж и подсчитывает количество уникальных товаров, проданных за каждый месяц каждого года, а затем отфильтруйте месяцы, в которые было продано не менее 2 товаров. (Заказы)
25.	Напишите запрос для нахождения минимального и максимального количества заказов в год. Используйте таблицу заказов. Необходимые таблицы:
DROP TABLE IF EXISTS Employees;

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50) NULL,
    LastName VARCHAR(50) NULL,
    DepartmentName VARCHAR(50),
    Salary DECIMAL(10, 2),
    HireDate DATE,
    Age INT,
    Email VARCHAR(100) NULL,
    Country VARCHAR(50)
);

INSERT INTO Employees (EmployeeID, FirstName, LastName, DepartmentName, Salary, HireDate, Age, Email, Country) VALUES
(1, 'John', 'Doe', 'IT', 55000.00, '2020-01-01', 30, 'johndoe@example.com', 'USA'),
(2, 'Jane', 'Smith', 'HR', 65000.00, '2019-03-15', 28, 'janesmith@example.com', 'USA'),
(3, NULL, 'Johnson', 'Finance', 45000.00, '2021-05-10', 25, NULL, 'Canada'),
(4, 'James', 'Brown', 'Marketing', 60000.00, '2018-07-22', 35, 'jamesbrown@example.com', 'UK'),
(5, 'Patricia', NULL, 'HR', 70000.00, '2017-08-30', 40, NULL, 'USA'),
(6, 'Michael', 'Miller', 'IT', 75000.00, '2020-12-12', 27, 'michaelm@example.com', 'Germany'),
(7, 'Linda', NULL, 'Finance', 48000.00, '2016-11-02', 42, NULL, 'Canada'),
(8, 'David', 'Moore', 'Marketing', 85000.00, '2021-09-01', 29, 'davidm@example.com', 'UK'),
(9, 'Elizabeth', 'Taylor', 'HR', 60000.00, '2019-05-18', 31, 'elizabetht@example.com', 'USA'),
(10, 'William', NULL, 'IT', 64000.00, '2020-04-10', 26, NULL, 'Germany'),
(11, NULL, 'Thomas', 'Finance', 47000.00, '2017-01-25', 38, NULL, 'Canada'),
(12, 'Joseph', 'Jackson', 'Marketing', 78000.00, '2016-09-30', 44, 'josephj@example.com', 'UK'),
(13, 'Karen', 'White', 'HR', 59000.00, '2018-06-10', 33, 'karenw@example.com', 'USA'),
(14, 'Steven', NULL, 'IT', 71000.00, '2021-07-15', 24, NULL, 'Germany'),
(15, 'Nancy', 'Clark', 'Finance', 45000.00, '2020-02-20', 27, 'nancyc@example.com', 'Canada'),
(16, 'George', 'Lewis', 'Marketing', 80000.00, '2019-11-10', 36, 'georgel@example.com', 'UK'),
(17, 'Betty', NULL, 'HR', 55000.00, '2017-04-05', 41, NULL, 'USA'),
(18, 'Samuel', 'Walker', 'IT', 72000.00, '2021-03-22', 23, 'samuelw@example.com', 'Germany'),
(19, 'Helen', 'Hall', 'Finance', 49000.00, '2018-10-16', 34, 'helenh@example.com', 'Canada'),
(20, NULL, 'Allen', 'Marketing', 90000.00, '2015-08-11', 50, NULL, 'UK'),
(21, 'Betty', 'Young', 'HR', 53000.00, '2020-05-17', 28, 'bettyy@example.com', 'USA'),
(22, 'Frank', NULL, 'IT', 67000.00, '2021-02-02', 26, 'frankk@example.com', 'Germany'),
(23, 'Deborah', 'Scott', 'Finance', 47000.00, '2019-07-09', 29, NULL, 'Canada'),
(24, 'Matthew', 'Green', 'Marketing', 76000.00, '2021-01-15', 30, 'matthewg@example.com', 'UK'),
(25, NULL, 'Adams', 'HR', 54000.00, '2020-06-21', 27, NULL, 'USA'),
(26, 'Paul', 'Nelson', 'IT', 71000.00, '2018-12-03', 37, 'pauln@example.com', 'Germany'),
(27, 'Margaret', NULL, 'Finance', 46000.00, '2020-08-19', 25, 'margaretc@example.com', 'Canada'),
(28, 'Anthony', 'Mitchell', 'Marketing', 82000.00, '2021-04-10', 29, NULL, 'UK'),
(29, 'Lisa', 'Perez', 'HR', 60000.00, '2021-03-05', 24, 'lisap@example.com', 'USA'),
(30, NULL, 'Roberts', 'IT', 69000.00, '2019-09-24', 32, NULL, 'Germany'),
(31, 'Jessica', 'Gonzalez', 'Finance', 47000.00, '2017-12-13', 38, 'jessicag@example.com', 'Canada'),
(32, 'Brian', NULL, 'Marketing', 85000.00, '2018-11-05', 35, NULL, 'UK'),
(33, 'Dorothy', 'Evans', 'HR', 59000.00, '2019-06-11', 31, 'dorothye@example.com', 'USA'),
(34, 'Matthew', 'Carter', 'IT', 70000.00, '2020-01-29', 29, 'matthewc@example.com', 'Germany'),
(35, NULL, 'Martinez', 'Finance', 51000.00, '2021-06-06', 22, NULL, 'Canada'),
(36, 'Daniel', 'Perez', 'Marketing', 83000.00, '2021-07-01', 30, 'danielp@example.com', 'UK'),
(37, 'Catherine', 'Roberts', 'HR', 60000.00, '2020-09-19', 27, 'catheriner@example.com', 'USA'),
(38, 'Ronald', NULL, 'IT', 68000.00, '2017-02-04', 39, NULL, 'Germany'),
(39, 'Angela', 'Jenkins', 'Finance', 52000.00, '2018-04-23', 34, 'angelaj@example.com', 'Canada'),
(40, 'Gary', 'Wright', 'Marketing', 87000.00, '2021-01-10', 29, NULL, 'UK');

DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS Products;
DROP TABLE IF EXISTS Customers;

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2),
    Category VARCHAR(50),
    StockQuantity INT
);

INSERT INTO Products VALUES
(1, 'Laptop', 1200.00, 'Electronics', 30),
(2, 'Smartphone', 800.00, 'Electronics', 50),
(3, 'Tablet', 400.00, 'Electronics', 40),
(4, 'Monitor', 250.00, 'Electronics', 60),
(5, 'Keyboard', 50.00, 'Accessories', 100),
(6, 'Mouse', 30.00, 'Accessories', 120),
(7, 'Chair', 150.00, 'Furniture', 80),
(8, 'Desk', 200.00, 'Furniture', 75),
(9, 'Pen', 5.00, 'Stationery', 300),
(10, 'Notebook', 10.00, 'Stationery', 500),
(11, 'Printer', 180.00, 'Electronics', 25),
(12, 'Camera', 500.00, 'Electronics', 40),
(13, 'Flashlight', 25.00, 'Tools', 200),
(14, 'Shirt', 30.00, 'Clothing', 150),
(15, 'Jeans', 45.00, 'Clothing', 120),
(16, 'Jacket', 80.00, 'Clothing', 70),
(17, 'Shoes', 60.00, 'Clothing', 100),
(18, 'Hat', 20.00, 'Accessories', 50),
(19, 'Socks', 10.00, 'Clothing', 200),
(20, 'T-Shirt', 25.00, 'Clothing', 150),
(21, 'Lamp', 60.00, 'Furniture', 40),
(22, 'Coffee Table', 100.00, 'Furniture', 35),
(23, 'Book', 15.00, 'Stationery', 250),
(24, 'Rug', 90.00, 'Furniture', 60),
(25, 'Cup', 5.00, 'Accessories', 500),
(26, 'Bag', 25.00, 'Accessories', 300),
(27, 'Couch', 450.00, 'Furniture', 15),
(28, 'Fridge', 600.00, 'Electronics', 20),
(29, 'Stove', 500.00, 'Electronics', 15),
(30, 'Microwave', 120.00, 'Electronics', 25),
(31, 'Air Conditioner', 350.00, 'Electronics', 10),
(32, 'Washing Machine', 450.00, 'Electronics', 15),
(33, 'Dryer', 400.00, 'Electronics', 10),
(34, 'Hair Dryer', 30.00, 'Accessories', 100),
(35, 'Iron', 40.00, 'Electronics', 50),
(36, 'Coffee Maker', 50.00, 'Electronics', 60),
(37, 'Blender', 35.00, 'Electronics', 40),
(38, 'Juicer', 55.00, 'Electronics', 30),
(39, 'Toaster', 40.00, 'Electronics', 70),
(40, 'Dishwasher', 500.00, 'Electronics', 20);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(50),
    Address VARCHAR(255),
    City VARCHAR(100),
    State VARCHAR(100),
    PostalCode VARCHAR(20),
    Country VARCHAR(100)
);

INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Phone, Address, City, State, PostalCode, Country) VALUES
(1, 'John', 'Doe', 'johndoe@gmail.com', '555-1234', '123 Elm St', 'New York', 'NY', '10001', 'USA'),
(2, 'Jane', 'Smith', 'janesmith@yahoo.com', '555-2345', '456 Oak St', 'Los Angeles', 'CA', '90001', 'USA'),
(3, 'Alice', 'Johnson', 'alicej@outlook.com', '555-3456', '789 Pine St', 'Toronto', 'ON', 'M4B1B3', 'Canada'),
(4, 'Bob', 'Brown', 'bobbrown@hotmail.com', '555-4567', '101 Maple St', 'Vancouver', 'BC', 'V5K0A1', 'Canada'),
(5, 'Charlie', 'Davis', 'charliedavis@gmail.com', '555-5678', '202 Birch St', 'Sydney', 'NSW', '2000', 'Australia'),
(6, 'David', 'Martinez', 'davidm@live.com', '555-6789', '303 Cedar St', 'Melbourne', 'VIC', '3000', 'Australia'),
(7, 'Emily', 'Garcia', 'emilyg@yahoo.com', '555-7890', '404 Redwood St', 'London', 'England', 'SW1A 1AA', 'UK'),
(8, 'Frank', 'Hernandez', 'frankh@outlook.com', '555-8901', '505 Willow St', 'Manchester', 'England', 'M1 1AE', 'UK'),
(9, 'Grace', 'Lopez', 'gracel@gmail.com', '555-9012', '606 Aspen St', 'Birmingham', 'England', 'B1 1AA', 'UK'),
(10, 'Helen', 'Gonzalez', 'heleng@yahoo.com', '555-0123', '707 Fir St', 'Berlin', 'BE', '10117', 'Germany'),
(11, 'Irene', 'Perez', 'irenep@hotmail.com', '555-1234', '808 Maple Ave', 'Munich', 'BY', '80331', 'Germany'),
(12, 'Jack', 'Wilson', 'jackw@live.com', '555-2345', '909 Oak Ave', 'Hamburg', 'HH', '20095', 'Germany'),
(13, 'Kim', 'Anderson', 'kima@gmail.com', '555-3456', '111 Pine Ave', 'Paris', 'Île-de-France', '75001', 'France'),
(14, 'Liam', 'Thomas', 'liamt@yahoo.com', '555-4567', '222 Cedar Ave', 'Lyon', 'Auvergne-Rhône-Alpes', '69001', 'France'),
(15, 'Megan', 'Taylor', 'megant@outlook.com', '555-5678', '333 Redwood Ave', 'Marseille', 'Provence-Alpes-Côte Azur', '13001', 'France'),
(16, 'Nathan', 'Moore', 'nathanm@hotmail.com', '555-6789', '444 Willow Ave', 'Tokyo', 'TK', '100-0001', 'Japan'),
(17, 'Olivia', 'Jackson', 'oliviaj@gmail.com', '555-7890', '555 Birch Ave', 'Osaka', 'OS', '530-0001', 'Japan'),
(18, 'Paul', 'White', 'paulw@yahoo.com', '555-8901', '666 Maple Blvd', 'Kyoto', 'KY', '600-8001', 'Japan'),
(19, 'Quincy', 'Lee', 'quincyl@outlook.com', '555-9012', '777 Oak Blvd', 'Seoul', 'SO', '04547', 'South Korea'),
(20, 'Rachel', 'Harris', 'rachelh@hotmail.com', '555-0123', '888 Pine Blvd', 'Busan', 'BU', '48058', 'South Korea'),
(21, 'Sam', 'Clark', 'samc@gmail.com', '555-1234', '999 Cedar Blvd', 'Incheon', 'IC', '22382', 'South Korea'),
(22, 'Tina', 'Allen', 'tinaallen@yahoo.com', '555-2345', '1010 Redwood Blvd', 'Mexico City', 'CMX', '01000', 'Mexico'),
(23, 'Ursula', 'Scott', 'ursulas@outlook.com', '555-3456', '1111 Willow Blvd', 'Guadalajara', 'JAL', '44100', 'Mexico'),
(24, 'Victor', 'Adams', 'victora@hotmail.com', '555-4567', '1212 Birch Blvd', 'Monterrey', 'NLE', '64000', 'Mexico'),
(25, 'Walter', 'Baker', 'walterb@live.com', '555-5678', '1313 Oak Blvd', 'New York', 'NY', '10001', 'USA'),
(26, 'Xander', 'Nelson', 'xandern@gmail.com', '555-6789', '1414 Cedar Blvd', 'Los Angeles', 'CA', '90001', 'USA'),
(27, 'Yvonne', 'Carter', 'yvonnec@yahoo.com', '555-7890', '1515 Maple Dr', 'Chicago', 'IL', '60601', 'USA'),
(28, 'Zane', 'Mitchell', 'zanem@outlook.com', '555-8901', '1616 Redwood Dr', 'Houston', 'TX', '77001', 'USA'),
(29, 'Anna', 'Roberts', 'annar@hotmail.com', '555-9012', '1717 Willow Dr', 'Sydney', 'NSW', '2000', 'Australia'),
(30, 'Ben', 'King', 'benk@live.com', '555-0123', '1818 Birch Dr', 'Melbourne', 'VIC', '3000', 'Australia'),
(31, 'Chloe', 'Green', 'chloeg@gmail.com', '555-1234', '1919 Oak Dr', 'Toronto', 'ON', 'M4B1B3', 'Canada'),
(32, 'Daniel', 'Evans', 'daniele@yahoo.com', '555-2345', '2020 Cedar Dr', 'Vancouver', 'BC', 'V5K0A1', 'Canada'),
(33, 'Ella', 'Collins', 'ellac@outlook.com', '555-3456', '2121 Redwood Dr', 'London', 'England', 'SW1A 1AA', 'UK'),
(34, 'Finn', 'Morris', 'finnm@hotmail.com', '555-4567', '2222 Willow St', 'Manchester', 'England', 'M1 1AE', 'UK'),
(35, 'Grace', 'Lee', 'gracel@live.com', '555-5678', '2323 Birch St', 'Berlin', 'BE', '10117', 'Germany'),
(36, 'Holly', 'Martinez', 'hollym@gmail.com', '555-6789', '2424 Oak St', 'Munich', 'BY', '80331', 'Germany'),
(37, 'Ian', 'Robinson', 'ianr@yahoo.com', '555-7890', '2525 Cedar St', 'Warsaw', 'WA', '00-001', 'Poland'),
(38, 'Jasmine', 'Walker', 'jasminew@outlook.com', '555-8901', '2626 Redwood St', 'Lisbon', 'LI', '1100-148', 'Portugal'),
(39, 'Kyle', 'Young', 'kyley@hotmail.com', '555-9012', '2727 Willow St', 'Pittsburgh', 'PA', '15201','USA'),
(40, 'Liam', 'Harris', 'liamh@live.com', '555-0123', '2828 Birch St', 'Richmond', 'VA', '23220','USA');


CREATE TABLE Orders (
        OrderID INT PRIMARY KEY,
        CustomerID INT,
        ProductID INT,
        OrderDate DATE,
        Quantity INT,
        TotalAmount DECIMAL(10, 2),
        FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
        FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
    );

    -- Insert 40 orders
INSERT INTO Orders VALUES
(1, 1, 2, '2023-05-14', 1, 800.00),
(2, 1, 3, '2024-09-07', 2, 800.00),
(3, 1, 4, '2022-11-22', 1, 250.00),
(4, 1, 5, '2021-03-30', 3, 150.00),

(5, 2, 6, '2025-07-19', 1, 30.00),

(6, 3, 7, '2022-08-25', 2, 300.00),
(7, 3, 8, '2024-06-10', 1, 200.00),

(8, 4, 9, '2021-12-04', 4, 40.00),

(9, 5, 10, '2023-02-18', 1, 10.00),
(10, 5, 11, '2025-09-27', 2, 360.00),

(11, 6, 12, '2023-10-11', 1, 500.00),
(12, 6, 13, '2024-04-03', 1, 25.00),
(13, 6, 14, '2022-07-29', 2, 60.00),

(14, 7, 15, '2021-01-22', 3, 135.00),

(15, 8, 16, '2025-11-15', 1, 80.00),

(16, 9, 17, '2022-10-08', 1, 60.00),
(17, 9, 18, '2023-06-21', 2, 40.00),
(18, 9, 19, '2021-09-13', 5, 50.00),

(19, 10, 20, '2025-03-05', 2, 50.00),

(20, 11, 21, '2024-08-14', 1, 60.00),
(21, 11, 22, '2022-12-01', 1, 100.00),

(22, 12, 23, '2023-09-09', 1, 15.00),
(23, 12, 24, '2021-07-18', 2, 180.00),

(24, 13, 25, '2025-06-23', 3, 15.00),

(25, 14, 26, '2023-03-12', 4, 100.00),
(26, 14, 27, '2022-04-07', 1, 450.00),

(27, 15, 28, '2024-11-30', 1, 600.00),

(28, 16, 29, '2021-02-25', 1, 500.00),

(29, 17, 30, '2025-05-28', 2, 240.00),

(30, 18, 31, '2023-08-20', 1, 350.00),
(31, 18, 32, '2022-01-17', 1, 450.00),

(32, 19, 33, '2025-09-10', 1, 40.00),

(33, 20, 34, '2021-04-04', 2, 100.00),
(34, 20, 35, '2024-07-15', 3, 120.00),
(35, 20, 36, '2022-10-31', 1, 60.00),

(36, 21, 37, '2023-12-22', 1, 35.00),

(37, 22, 38, '2021-06-06', 2, 110.00),
(38, 22, 39, '2025-02-01', 1, 40.00),

(39, 23, 40, '2023-11-26', 3, 120.00),
(40, 24, 1, '2024-03-09', 1, 1200.00);


DROP TABLE IF EXISTS Sales;

CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    CustomerID INT,
    SaleDate DATE,
    SaleAmount DECIMAL(10, 2)
);

INSERT INTO Sales (SaleID, ProductID, CustomerID, SaleDate, SaleAmount) VALUES
(1, 1, 1, '2023-01-01', 150.00),
(2, 2, 2, '2023-01-02', 200.00),
(3, 3, 3, '2023-01-03', 250.00),
(4, 4, 4, '2023-01-04', 300.00),
(5, 5, 5, '2023-01-05', 350.00),
(6, 6, 6, '2023-01-06', 400.00),
(7, 7, 7, '2023-01-07', 450.00),
(8, 8, 8, '2023-01-08', 500.00),
(9, 9, 9, '2023-01-09', 550.00),
(10, 10, 10, '2023-01-10', 600.00),
(11, 1, 1, '2023-01-11', 150.00),
(12, 2, 2, '2023-01-12', 200.00),
(13, 3, 3, '2023-01-13', 250.00),
(14, 4, 4, '2023-01-14', 300.00),
(15, 5, 5, '2023-01-15', 350.00),
(16, 6, 6, '2023-01-16', 400.00),
(17, 7, 7, '2023-01-17', 450.00),
(18, 8, 8, '2023-01-18', 500.00),
(19, 9, 9, '2023-01-19', 550.00),
(20, 10, 10, '2023-01-20', 600.00),
(21, 1, 2, '2023-01-21', 150.00),
(22, 2, 3, '2023-01-22', 200.00),
(23, 3, 4, '2023-01-23', 250.00),
(24, 4, 5, '2023-01-24', 300.00),
(25, 5, 6, '2023-01-25', 350.00),
(26, 6, 7, '2023-01-26', 400.00),
(27, 7, 8, '2023-01-27', 450.00),
(28, 8, 9, '2023-01-28', 500.00),
(29, 9, 10, '2023-01-29', 550.00),
(30, 10, 1, '2023-01-30', 600.00),
(31, 1, 2, '2023-02-01', 150.00),
(32, 2, 3, '2023-02-02', 200.00),
(33, 3, 4, '2023-02-03', 250.00),
(34, 4, 5, '2023-02-04', 300.00),
(35, 5, 6, '2023-02-05', 350.00),
(36, 6, 7, '2023-02-06', 400.00),
(37, 7, 8, '2023-02-07', 450.00),
(38, 8, 9, '2023-02-08', 500.00),
(39, 9, 10, '2023-02-09', 550.00),
(40, 10, 1, '2023-02-10', 600.00);
Ответы
 
 

Вот запросы SQL для решения ваших задач:
•	Минимальная цена товара: SELECT MIN(Цена) FROM Товары;
•	Максимальная зарплата: SELECT MAX(Зарплата) FROM Сотрудники;
•	Количество строк в «Клиенты»: SELECT COUNT(*) FROM Клиенты;
•	Уникальные категории продуктов: SELECT COUNT(DISTINCT Категория) FROM Продукты;
•	Общая сумма продаж для продукта 7: SELECT SUM(Сумма) FROM Продажи WHERE ПродуктID = 7;
•	Средний возраст сотрудников: SELECT AVG(Возраст) FROM Сотрудники;
•	Количество сотрудников по отделам: SELECT Отдел, COUNT(*) FROM Сотрудники GROUP BY Отдел;
•	Мин/макс цена по категориям: SELECT Категория, MIN(Цена), MAX(Цена) FROM Товары GROUP BY Категория;
•	Общий объем продаж на клиента: SELECT КлиентID, SUM(Сумма) FROM Продажи GROUP BY КлиентID;
•	Отделы с более чем 5 сотрудниками: SELECT DeptID FROM Сотрудники GROUP BY DeptID HAVING COUNT(*) > 5;
 

 


Вот запросы SQL для решения ваших задач, предполагая наличие стандартных имен таблиц и полей (таких как Sales (Продажи), Employees (Сотрудники), Category, TotalSales, AvgSales, DepartmentID, Name, Salary, Price, Year, CustomerID, OrderID и т. д.).
1. Общий и средний объем продаж по категориям продуктов
Код
SELECT Category,
       SUM(TotalSales) AS TotalSales,
       AVG(TotalSales) AS AvgSales
FROM Sales
GROUP BY Category;
Этот запрос рассчитывает общую сумму продаж и среднюю сумму продаж для каждой категории продуктов, используя агрегатные функции SUM() и AVG() в сочетании с GROUP BY.
2. Количество сотрудников отдела кадров
Код
SELECT COUNT(*) AS EmployeeCount
FROM Employees
WHERE Department = 'HR'; -- Или DepartmentID = 'ID_HR', в зависимости от структуры таблицы
Этот запрос подсчитывает количество сотрудников в отделе кадров (HR), используя COUNT() и WHERE, чтобы отфильтровать сотрудников по нужному отделу.*
3. Максимальная и минимальная зарплата по отделам
Код
SELECT DepartmentID,
       MAX(Salary) AS MaxSalary,
       MIN(Salary) AS MinSalary
FROM Employees
GROUP BY DepartmentID;
Этот запрос находит самую высокую (MAX) и самую низкую (MIN) зарплату в каждом отделе, группируя данные по DepartmentID.
4. Средняя зарплата по отделам
Код
SELECT DepartmentID,
       AVG(Salary) AS AvgSalary
FROM Employees
GROUP BY DepartmentID;
Этот запрос вычисляет среднюю зарплату (AVG(Salary)) для каждого отдела (DepartmentID).
5. Средняя зарплата и количество сотрудников по отделам
Код
SELECT DepartmentID,
       AVG(Salary) AS AvgSalary,
       COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY DepartmentID;
Этот запрос выводит среднюю зарплату и количество сотрудников (COUNT()) для каждого отдела, группируя результаты по DepartmentID.*
6. Категории товаров со средней ценой более 400
Код
SELECT Category
FROM Products -- Предполагаем, что у нас есть таблица 'Products' с ценами
GROUP BY Category
HAVING AVG(Price) > 400;
Этот запрос фильтрует категории товаров, у которых средняя цена (AVG(Price)) превышает 400, используя оператор HAVING после GROUP BY.
7. Общий объем продаж за каждый год
Код
SELECT YEAR(SaleDate) AS SaleYear, -- Предполагаем, что в таблице 'Sales' есть поле с датой продажи
       SUM(TotalSales) AS TotalSalesPerYear
FROM Sales
GROUP BY YEAR(SaleDate)
ORDER BY SaleYear;
Этот запрос вычисляет общий объем продаж (SUM(TotalSales)) за каждый год, извлекая год из даты продажи (YEAR(SaleDate)) и группируя по году.
8. Клиенты, разместившие не менее 3 заказов
Код
SELECT CustomerID
FROM Orders -- Предполагаем, что у нас есть таблица 'Orders' с информацией о заказах
GROUP BY CustomerID
HAVING COUNT(OrderID) >= 3;
Этот запрос выводит CustomerID клиентов, которые разместили 3 или более заказов, подсчитывая (COUNT(OrderID)) заказы по каждому клиенту и используя HAVING для фильтрации.
9. Отделы со средними расходами на заработную плату более 60000
Код
SELECT DepartmentID
FROM Employees
GROUP BY DepartmentID
HAVING AVG(Salary) > 60000;
Этот запрос находит отделы, в которых средняя заработная плата (AVG(Salary)) превышает 60000, используя HAVING для фильтрации групп сотрудников.

    


Ниже представлены SQL-запросы для выполнения ваших задач. Обратите внимание, что названия таблиц и столбцов могут отличаться в зависимости от вашей конкретной базы данных. В примерах используются гипотетические названия таблиц, соответствующие условиям ваших запросов. 
1. Средняя цена по категориям товаров (больше 150)
Этот запрос покажет среднюю цену для каждой категории товаров и отфильтрует те, у которых средняя цена выше 150. 
Код
SELECT
    category,
    AVG(price) AS average_price
FROM
    products -- Замените 'products' на вашу таблицу с товарами
GROUP BY
    category
HAVING
    AVG(price) > 150;
2. Общий объем продаж по клиентам (больше 1500)
Этот запрос рассчитывает общий объем продаж для каждого клиента и фильтрует клиентов с общим объемом продаж свыше 1500. 
Код
SELECT
    customer_id,
    SUM(order_total) AS total_sales
FROM
    orders -- Замените 'orders' на вашу таблицу с заказами
GROUP BY
    customer_id
HAVING
    SUM(order_total) > 1500;
3. Общая и средняя зарплата сотрудников по отделам (средняя больше 65000)
Этот запрос находит общую и среднюю зарплату сотрудников в каждом отделе и фильтрует отделы, у которых средняя зарплата превышает 65000. 
Код
SELECT
    department,
    SUM(salary) AS total_salary,
    AVG(salary) AS average_salary
FROM
    employees -- Замените 'employees' на вашу таблицу с сотрудниками
GROUP BY
    department
HAVING
    AVG(salary) > 65000;
4. Общая сумма заказов и наименьшая сумма покупок по клиентам (объем заказа > 50)
Этот запрос вычисляет общую сумму заказов, вес которых превышает 50, для каждого клиента, а также находит наименьшую сумму покупок для клиента.
Код
SELECT
    customer_id,
    SUM(order_total) AS total_freight_over_50, -- Предполагается, что order_total - это столбец с суммой заказа
    MIN(order_total) AS min_order_amount
FROM
    orders -- Замените 'orders' на вашу таблицу с заказами
WHERE
    freight > 50 -- Замените 'freight' на столбец с весом заказа
GROUP BY
    customer_id;
Примечание: Если в запросе используется информация из таблицы tsql2012.sales.orders, то в запросе следует использовать эту таблицу и соответствующие столбцы. 
5. Общий объем продаж и количество уникальных товаров по месяцам и годам
Этот запрос вычисляет общий объем продаж и количество уникальных товаров, проданных за каждый месяц каждого года, а затем фильтрует месяцы, в которые было продано не менее 2 товаров. 
Код
SELECT
    YEAR(order_date) AS order_year, -- Замените на соответствующую функцию извлечения года
    MONTH(order_date) AS order_month, -- Замените на соответствующую функцию извлечения месяца
    SUM(order_total) AS total_sales,
    COUNT(DISTINCT product_id) AS unique_products_sold
FROM
    orders -- Замените 'orders' на вашу таблицу с заказами
GROUP BY
    YEAR(order_date),
    MONTH(order_date)
HAVING
    COUNT(DISTINCT product_id) >= 2
ORDER BY
    order_year,
    order_month;
6. Минимальное и максимальное количество заказов в год
Этот запрос находит минимальное и максимальное количество заказов за каждый год, используя таблицу заказов. 


урок-8 Практика
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
Задачи легкого уровня
1.	Используя таблицу «Товары», найдите общее количество товаров, доступных в каждой категории.
2.	Используя таблицу «Товары», получите среднюю цену товаров в категории «Электроника».
3.	Используя таблицу «Клиенты», перечислите всех клиентов из городов, названия которых начинаются на букву «Л».
4.	Используя таблицу Products, получите все названия продуктов, заканчивающиеся на «er».
5.	Используя таблицу «Клиенты», перечислите всех клиентов из стран, заканчивающихся на «А».
6.	Используя таблицу «Товары», покажите самую высокую цену среди всех товаров.
7.	Используя таблицу «Продукты», обозначьте запасы как «Мало запасов», если количество < 30, в противном случае — «Достаточно».
8.	Используя таблицу «Клиенты», найдите общее количество клиентов в каждой стране.
9.	Используя таблицу «Заказы», найдите минимальное и максимальное заказываемое количество.
________________________________________
Задачи среднего уровня
10.	Используя таблицы «Заказы» и «Счета-фактуры», перечислите идентификаторы клиентов, которые разместили заказы в январе 2023 года, чтобы найти тех, у кого не было счетов-фактур.
11.	Используя таблицы Products и Products_Discounted, объедините все названия продуктов из таблиц Products и Products_Discounted, включая дубликаты.
12.	Используя таблицы Products и Products_Discounted, объедините все названия продуктов из таблиц Products и Products_Discounted без дубликатов.
13.	Используя таблицу «Заказы», найдите среднюю сумму заказа по годам.
14.	Используя таблицу «Товары», сгруппируйте товары по цене: «Низкая» (<100), «Средняя» (100–500), «Высокая» (>500). Возвращает название товара и ценовую группу.
15.	Используя таблицу City_Population, используйте Pivot для отображения значений столбца Year в отдельных столбцах ([2012], [2013]) и скопируйте результаты в новую таблицу Population_Each_Year.
16.	Используя таблицу «Продажи», найдите общий объем продаж по идентификатору продукта.
17.	Используя таблицу «Products», найдите товары, содержащие в названии «oo», используя подстановочные знаки. Верните имя_продукта.
18.	Используя таблицу City_Population, используйте Pivot для отображения значений столбца City в отдельных столбцах (Bektemir, Chilanzor, Yakkasaroy) и скопируйте результаты в новую таблицу Population_Each_City.
________________________________________
Задачи сложного уровня
19.	Используя таблицу «Счета», отобразите трёх клиентов с наибольшей общей суммой счёта. Верните CustomerID и Totalspent.
20.	Преобразуйте таблицу Population_Each_Year в ее исходный формат (City_Population).
21.	Используя таблицы «Продукты» и «Продажи», перечислите названия продуктов и количество продаж каждого из них. (Исследование соединений)
22.	Преобразовать таблицу Population_Each_City в ее исходный формат (City_Population).
________________________________________




Урок 10. Соединения
Примечания перед выполнением заданий:
•	Задачи должны решаться с использованием SQL Server .
•	Регистр не учитывается.
•	Псевдонимы не влияют на результат.
•	Оценка производится на основании правильного результата .
•	Достаточно одного правильного решения.
🟢 Задания лёгкого уровня (10)
1.	Используя таблицы EmployeesиDepartments , напишите запрос, чтобы вернуть имена и зарплаты сотрудников, чья зарплата превышает 50000, а также названия их отделов.
🔁 Ожидаемые столбцы: EmployeeName , Salary,DepartmentName
2.	Используя таблицы CustomersиOrders , напишите запрос для отображения имен клиентов и дат заказов, размещенных в 2023 году.
🔁 Ожидаемые столбцы: FirstName , LastName,OrderDate
3.	Используя таблицы EmployeesиDepartments , напишите запрос, чтобы отобразить всех сотрудников вместе с названиями их отделов. Включая сотрудников, которые не относятся ни к одному отделу.
🔁 Ожидаемые столбцы: EmployeeName ,DepartmentName
4.	Используя таблицы ProductsиSuppliers , составьте запрос для получения списка всех поставщиков и поставляемых ими товаров. Показывать поставщиков, даже если они не поставляют никаких товаров.
🔁 Ожидаемые столбцы: SupplierName ,ProductName
5.	Используя таблицы OrdersиPayments , напишите запрос для возврата всех заказов и соответствующих им платежей. Включая заказы без платежей и платежи, не связанные ни с одним заказом.
🔁 Ожидаемые столбцы: OrderID , OrderDate, PaymentDate,Amount
6.	Используя Employeesтаблицу , напишите запрос, чтобы отобразить имя каждого сотрудника вместе с именем его руководителя.
🔁 Ожидаемые столбцы: EmployeeName ,ManagerName
7.	Используя таблицы Students, Courses, иEnrollments , напишите запрос для вывода списка имён студентов, зачисленных на курс «Математика 101».
🔁 Ожидаемые столбцы: StudentName ,CourseName
8.	Используя таблицы CustomersиOrders , напишите запрос для поиска клиентов, оформивших заказ более чем на 3 товара. Выведите их имена и количество заказанных товаров.
🔁 Ожидаемые столбцы: FirstName , LastName,Quantity
9.	Используя таблицы EmployeesиDepartments , напишите запрос для получения списка сотрудников, работающих в отделе кадров.
🔁 Ожидаемые столбцы: EmployeeName ,DepartmentName
________________________________________
🟠 Задачи среднего уровня (9)
10.	Используя таблицы EmployeesиDepartments , напишите запрос для возврата названий отделов, в которых работает более 5 сотрудников.
🔁 Ожидаемые столбцы: DepartmentName ,EmployeeCount
11.	Используя таблицы ProductsиSales , напишите запрос для поиска товаров, которые никогда не продавались.
🔁 Ожидаемые столбцы: ProductID ,ProductName
12.	Используя таблицы CustomersиOrders , напишите запрос для возврата имён клиентов, которые оформили хотя бы один заказ.
🔁 Ожидаемые столбцы: FirstName , LastName,TotalOrders
13.	Используя таблицы EmployeesиDepartments , напишите запрос, чтобы отобразить только те записи, в которых есть и сотрудник, и отдел (без значений NULL).
🔁 Ожидаемые столбцы: EmployeeName ,DepartmentName
14.	Используя Employeesтаблицу , напишите запрос для поиска пар сотрудников, которые подчиняются одному и тому же менеджеру.
🔁 Ожидаемые столбцы: Employee1 , Employee2,ManagerID
15.	Используя таблицы OrdersиCustomers , напишите запрос для вывода списка всех заказов, размещенных в 2022 году, вместе с именем клиента.
🔁 Ожидаемые столбцы: OrderID , OrderDate, FirstName,LastName
16.	Используя таблицы EmployeesиDepartments , напишите запрос для возврата сотрудников отдела «Продажи», чья зарплата превышает 60000.
🔁 Ожидаемые столбцы: EmployeeName , Salary,DepartmentName
17.	Используя таблицы OrdersиPayments , напишите запрос, чтобы вернуть только те заказы, для которых имеется соответствующий платеж.
🔁 Ожидаемые столбцы: OrderID , OrderDate, PaymentDate,Amount
18.	Используя таблицы ProductsиOrders , напишите запрос для поиска товаров, которые никогда не были заказаны.
🔁 Ожидаемые столбцы: ProductID ,ProductName
________________________________________
🔴 Задания сложного уровня (9)
19.	Используя Employeesтаблицу , напишите запрос, чтобы найти сотрудников, чья зарплата больше средней зарплаты в их собственных отделах.
🔁 Ожидаемые столбцы: EmployeeName ,Salary
20.	Используя таблицы OrdersиPayments , напишите запрос для получения списка всех заказов, размещенных до 2020 года, по которым нет соответствующего платежа.
🔁 Ожидаемые столбцы: OrderID ,OrderDate
21.	Используя таблицы ProductsиCategories , напишите запрос для возврата товаров, не имеющих соответствующей категории.
🔁 Ожидаемые столбцы: ProductID ,ProductName
22.	Используя Employeesтаблицу , напишите запрос, чтобы найти сотрудников, которые подчиняются одному и тому же менеджеру и зарабатывают более 60000.
🔁 Ожидаемые столбцы: Employee1 , Employee2, ManagerID,Salary
23.	Используя таблицы EmployeesиDepartments , напишите запрос для возврата сотрудников, работающих в отделах, названия которых начинаются с буквы «М».
🔁 Ожидаемые столбцы: EmployeeName ,DepartmentName
24.	Используя таблицы ProductsиSales , напишите запрос для вывода списка продаж, сумма которых превышает 500, включая названия продуктов.
🔁 Ожидаемые столбцы: SaleID , ProductName,SaleAmount
25.	Используя таблицы Students, Courses, иEnrollments , напишите запрос для поиска студентов, которые не записались на курс «Математика 101».
🔁 Ожидаемые столбцы: StudentID ,StudentName
26.	Используя таблицы OrdersиPayments , напишите запрос для возврата заказов, в которых отсутствуют платежные реквизиты.
🔁 Ожидаемые столбцы: OrderID , OrderDate,PaymentID
27.	Используя таблицы ProductsиCategories , напишите запрос для получения списка товаров, относящихся либо к категории «Электроника», либо к категории «Мебель».
🔁 Ожидаемые столбцы: ProductID , ProductName,CategoryName




*/
